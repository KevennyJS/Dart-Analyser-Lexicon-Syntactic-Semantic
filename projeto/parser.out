Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALL
    ASSERTS
    ASYNC
    AT_SIGN
    BREAK
    CASE
    CATCH
    CLASS
    COMMENT
    COMMERCIAL_E
    CONST
    CONTINUE
    COVARIANT
    DEFAULT
    DEFERRED
    DO
    DOT
    DYNAMIC
    ENUM
    EXCLAMATION
    EXPORT
    EXTENDS
    EXTENSION
    EXTERNAL
    FACTORY
    FALSE
    FINAL
    FINALLY
    FUNCTION
    GET
    HIDE
    IMPLEMENTS
    IMPORTS
    INTERFACE
    LATE
    LBRACKET
    LIBRARY
    MIXIN
    NEW
    NULL
    ON
    OPERATOR
    PART
    RBRACKET
    REQUIRED
    RETHROW
    SET
    SHOW
    SPACE
    STATIC
    SUPER
    SWITCH
    SYNC
    THIS
    THROW
    TRUE
    TRY
    TYPEDEF
    VAR
    WITH
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> funcdecl
Rule 2     program -> funcdecl program
Rule 3     program -> declvar
Rule 4     program -> declvar program
Rule 5     declvar -> tipo assign SEMI_COLON
Rule 6     declvar -> tipo INTERROGATION ID SEMI_COLON
Rule 7     funcdecl -> signature body
Rule 8     signature -> tipo ID LPAREN sigParams RPAREN
Rule 9     signature -> tipo ID LPAREN RPAREN
Rule 10    sigParams -> tipo ID
Rule 11    sigParams -> tipo ID VIRGULA sigParams
Rule 12    body -> LCHAV stms RCHAV
Rule 13    body -> LCHAV RCHAV
Rule 14    bodyorstm -> stm
Rule 15    bodyorstm -> body
Rule 16    bodyorstm -> body ELSE stm
Rule 17    bodyorstm -> body ELSE body
Rule 18    stms -> stm
Rule 19    stms -> stm stms
Rule 20    stm -> exp SEMI_COLON
Rule 21    stm -> WHILE LPAREN exp RPAREN body
Rule 22    stm -> RETURN exp SEMI_COLON
Rule 23    stm -> IF LPAREN exp RPAREN bodyorstm
Rule 24    stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
Rule 25    stm -> FOR LPAREN tipo ID IN ID RPAREN body
Rule 26    stm -> declvar
Rule 27    tiposassign -> tipo assign
Rule 28    tiposassign -> tipo assign VIRGULA tipoassigns
Rule 29    tiposassign -> <empty>
Rule 30    tipoassigns -> assign
Rule 31    tipoassigns -> assign VIRGULA tipoassigns
Rule 32    midfor -> exp
Rule 33    midfor -> <empty>
Rule 34    call -> ID LPAREN params RPAREN
Rule 35    call -> ID LPAREN RPAREN
Rule 36    exp -> exp MORE exp
Rule 37    exp -> exp LESS exp
Rule 38    exp -> exp REST exp
Rule 39    exp -> exp MULTIPLICATION exp
Rule 40    exp -> exp DIVIDE exp
Rule 41    exp -> exp MORE_EQUAL exp
Rule 42    exp -> exp MORETHAN exp
Rule 43    exp -> exp LESS_EQUAL exp
Rule 44    exp -> exp LESSTHAN exp
Rule 45    exp -> exp AS exp
Rule 46    exp -> exp IS exp
Rule 47    exp -> exp IS_EXCLAMATION exp
Rule 48    exp -> exp EQUAL exp
Rule 49    exp -> exp EXCLAMATION_EQUAL exp
Rule 50    exp -> exp AND exp
Rule 51    exp -> exp OR exp
Rule 52    exp -> exp IF_NULL exp
Rule 53    exp -> exp INTERROGATION exp COLON exp
Rule 54    exp -> exp MULTIPLICATION_EQUAL exp
Rule 55    exp -> exp DIVIDE_EQUAL exp
Rule 56    exp -> exp SOMA_EQUAL exp
Rule 57    exp -> exp SUB_EQUAL exp
Rule 58    exp -> exp MORE_MORE
Rule 59    exp -> exp LESS_LESS
Rule 60    exp -> LPAREN exp RPAREN
Rule 61    exp -> AWAIT exp
Rule 62    exp -> DOT_DOT exp
Rule 63    exp -> INTERROGATION DOT_DOT exp
Rule 64    exp -> call
Rule 65    exp -> ID RECEIVE_VALUE exp
Rule 66    exp -> ID
Rule 67    exp -> NUM_INT
Rule 68    exp -> NUM_DOUBLE
Rule 69    exp -> STR_STRING
Rule 70    exp -> BOO_BOOLEAN
Rule 71    params -> exp VIRGULA params
Rule 72    params -> exp
Rule 73    assign -> ID RECEIVE_VALUE exp
Rule 74    tipo -> TIPO_DOUBLE
Rule 75    tipo -> TIPO_INT
Rule 76    tipo -> TIPO_STRING
Rule 77    tipo -> TIPO_BOOLEAN
Rule 78    tipo -> TIPO_VOID

Terminals, with rules where they appear

ABSTRACT             : 
ALL                  : 
AND                  : 50
AS                   : 45
ASSERTS              : 
ASYNC                : 
AT_SIGN              : 
AWAIT                : 61
BOO_BOOLEAN          : 70
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COLON                : 53
COMMENT              : 
COMMERCIAL_E         : 
CONST                : 
CONTINUE             : 
COVARIANT            : 
DEFAULT              : 
DEFERRED             : 
DIVIDE               : 40
DIVIDE_EQUAL         : 55
DO                   : 
DOT                  : 
DOT_DOT              : 62 63
DYNAMIC              : 
ELSE                 : 16 17
ENUM                 : 
EQUAL                : 48
EXCLAMATION          : 
EXCLAMATION_EQUAL    : 49
EXPORT               : 
EXTENDS              : 
EXTENSION            : 
EXTERNAL             : 
FACTORY              : 
FALSE                : 
FINAL                : 
FINALLY              : 
FOR                  : 24 25
FUNCTION             : 
GET                  : 
HIDE                 : 
ID                   : 6 8 9 10 11 25 25 34 35 65 66 73
IF                   : 23
IF_NULL              : 52
IMPLEMENTS           : 
IMPORTS              : 
IN                   : 25
INTERFACE            : 
INTERROGATION        : 6 53 63
IS                   : 46
IS_EXCLAMATION       : 47
LATE                 : 
LBRACKET             : 
LCHAV                : 12 13
LESS                 : 37
LESSTHAN             : 44
LESS_EQUAL           : 43
LESS_LESS            : 59
LIBRARY              : 
LPAREN               : 8 9 21 23 24 25 34 35 60
MIXIN                : 
MORE                 : 36
MORETHAN             : 42
MORE_EQUAL           : 41
MORE_MORE            : 58
MULTIPLICATION       : 39
MULTIPLICATION_EQUAL : 54
NEW                  : 
NULL                 : 
NUM_DOUBLE           : 68
NUM_INT              : 67
ON                   : 
OPERATOR             : 
OR                   : 51
PART                 : 
RBRACKET             : 
RCHAV                : 12 13
RECEIVE_VALUE        : 65 73
REQUIRED             : 
REST                 : 38
RETHROW              : 
RETURN               : 22
RPAREN               : 8 9 21 23 24 25 34 35 60
SEMI_COLON           : 5 6 20 22 24 24
SET                  : 
SHOW                 : 
SOMA_EQUAL           : 56
SPACE                : 
STATIC               : 
STR_STRING           : 69
SUB_EQUAL            : 57
SUPER                : 
SWITCH               : 
SYNC                 : 
THIS                 : 
THROW                : 
TIPO_BOOLEAN         : 77
TIPO_DOUBLE          : 74
TIPO_INT             : 75
TIPO_STRING          : 76
TIPO_VOID            : 78
TRUE                 : 
TRY                  : 
TYPEDEF              : 
VAR                  : 
VIRGULA              : 11 28 31 71
WHILE                : 21
WITH                 : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

assign               : 5 27 28 30 31
body                 : 7 15 16 17 17 21 24 25
bodyorstm            : 23
call                 : 64
declvar              : 3 4 26
exp                  : 20 21 22 23 32 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 53 54 54 55 55 56 56 57 57 58 59 60 61 62 63 65 71 72 73
funcdecl             : 1 2
midfor               : 24 24
params               : 34 71
program              : 2 4 0
sigParams            : 8 11
signature            : 7
stm                  : 14 16 18 19
stms                 : 12 19
tipo                 : 5 6 8 9 10 11 25 27 28
tipoassigns          : 28 31
tiposassign          : 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . declvar
    (4) program -> . declvar program
    (7) funcdecl -> . signature body
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (8) signature -> . tipo ID LPAREN sigParams RPAREN
    (9) signature -> . tipo ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    program                        shift and go to state 1
    funcdecl                       shift and go to state 2
    declvar                        shift and go to state 3
    signature                      shift and go to state 4
    tipo                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> funcdecl .
    (2) program -> funcdecl . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . declvar
    (4) program -> . declvar program
    (7) funcdecl -> . signature body
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (8) signature -> . tipo ID LPAREN sigParams RPAREN
    (9) signature -> . tipo ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    $end            reduce using rule 1 (program -> funcdecl .)
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    funcdecl                       shift and go to state 2
    program                        shift and go to state 11
    declvar                        shift and go to state 3
    signature                      shift and go to state 4
    tipo                           shift and go to state 5

state 3

    (3) program -> declvar .
    (4) program -> declvar . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . declvar
    (4) program -> . declvar program
    (7) funcdecl -> . signature body
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (8) signature -> . tipo ID LPAREN sigParams RPAREN
    (9) signature -> . tipo ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    $end            reduce using rule 3 (program -> declvar .)
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    declvar                        shift and go to state 3
    program                        shift and go to state 12
    funcdecl                       shift and go to state 2
    signature                      shift and go to state 4
    tipo                           shift and go to state 5

state 4

    (7) funcdecl -> signature . body
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 14

    body                           shift and go to state 13

state 5

    (5) declvar -> tipo . assign SEMI_COLON
    (6) declvar -> tipo . INTERROGATION ID SEMI_COLON
    (8) signature -> tipo . ID LPAREN sigParams RPAREN
    (9) signature -> tipo . ID LPAREN RPAREN
    (73) assign -> . ID RECEIVE_VALUE exp

    INTERROGATION   shift and go to state 16
    ID              shift and go to state 17

    assign                         shift and go to state 15

state 6

    (74) tipo -> TIPO_DOUBLE .

    INTERROGATION   reduce using rule 74 (tipo -> TIPO_DOUBLE .)
    ID              reduce using rule 74 (tipo -> TIPO_DOUBLE .)


state 7

    (75) tipo -> TIPO_INT .

    INTERROGATION   reduce using rule 75 (tipo -> TIPO_INT .)
    ID              reduce using rule 75 (tipo -> TIPO_INT .)


state 8

    (76) tipo -> TIPO_STRING .

    INTERROGATION   reduce using rule 76 (tipo -> TIPO_STRING .)
    ID              reduce using rule 76 (tipo -> TIPO_STRING .)


state 9

    (77) tipo -> TIPO_BOOLEAN .

    INTERROGATION   reduce using rule 77 (tipo -> TIPO_BOOLEAN .)
    ID              reduce using rule 77 (tipo -> TIPO_BOOLEAN .)


state 10

    (78) tipo -> TIPO_VOID .

    INTERROGATION   reduce using rule 78 (tipo -> TIPO_VOID .)
    ID              reduce using rule 78 (tipo -> TIPO_VOID .)


state 11

    (2) program -> funcdecl program .

    $end            reduce using rule 2 (program -> funcdecl program .)


state 12

    (4) program -> declvar program .

    $end            reduce using rule 4 (program -> declvar program .)


state 13

    (7) funcdecl -> signature body .

    TIPO_DOUBLE     reduce using rule 7 (funcdecl -> signature body .)
    TIPO_INT        reduce using rule 7 (funcdecl -> signature body .)
    TIPO_STRING     reduce using rule 7 (funcdecl -> signature body .)
    TIPO_BOOLEAN    reduce using rule 7 (funcdecl -> signature body .)
    TIPO_VOID       reduce using rule 7 (funcdecl -> signature body .)
    $end            reduce using rule 7 (funcdecl -> signature body .)


state 14

    (12) body -> LCHAV . stms RCHAV
    (13) body -> LCHAV . RCHAV
    (18) stms -> . stm
    (19) stms -> . stm stms
    (20) stm -> . exp SEMI_COLON
    (21) stm -> . WHILE LPAREN exp RPAREN body
    (22) stm -> . RETURN exp SEMI_COLON
    (23) stm -> . IF LPAREN exp RPAREN bodyorstm
    (24) stm -> . FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> . FOR LPAREN tipo ID IN ID RPAREN body
    (26) stm -> . declvar
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    RCHAV           shift and go to state 19
    WHILE           shift and go to state 22
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    stms                           shift and go to state 18
    stm                            shift and go to state 20
    exp                            shift and go to state 21
    tipo                           shift and go to state 27
    declvar                        shift and go to state 29
    call                           shift and go to state 33

state 15

    (5) declvar -> tipo assign . SEMI_COLON

    SEMI_COLON      shift and go to state 38


state 16

    (6) declvar -> tipo INTERROGATION . ID SEMI_COLON

    ID              shift and go to state 39


state 17

    (8) signature -> tipo ID . LPAREN sigParams RPAREN
    (9) signature -> tipo ID . LPAREN RPAREN
    (73) assign -> ID . RECEIVE_VALUE exp

    LPAREN          shift and go to state 40
    RECEIVE_VALUE   shift and go to state 41


state 18

    (12) body -> LCHAV stms . RCHAV

    RCHAV           shift and go to state 42


state 19

    (13) body -> LCHAV RCHAV .

    TIPO_DOUBLE     reduce using rule 13 (body -> LCHAV RCHAV .)
    TIPO_INT        reduce using rule 13 (body -> LCHAV RCHAV .)
    TIPO_STRING     reduce using rule 13 (body -> LCHAV RCHAV .)
    TIPO_BOOLEAN    reduce using rule 13 (body -> LCHAV RCHAV .)
    TIPO_VOID       reduce using rule 13 (body -> LCHAV RCHAV .)
    $end            reduce using rule 13 (body -> LCHAV RCHAV .)
    WHILE           reduce using rule 13 (body -> LCHAV RCHAV .)
    RETURN          reduce using rule 13 (body -> LCHAV RCHAV .)
    IF              reduce using rule 13 (body -> LCHAV RCHAV .)
    FOR             reduce using rule 13 (body -> LCHAV RCHAV .)
    LPAREN          reduce using rule 13 (body -> LCHAV RCHAV .)
    AWAIT           reduce using rule 13 (body -> LCHAV RCHAV .)
    DOT_DOT         reduce using rule 13 (body -> LCHAV RCHAV .)
    INTERROGATION   reduce using rule 13 (body -> LCHAV RCHAV .)
    ID              reduce using rule 13 (body -> LCHAV RCHAV .)
    NUM_INT         reduce using rule 13 (body -> LCHAV RCHAV .)
    NUM_DOUBLE      reduce using rule 13 (body -> LCHAV RCHAV .)
    STR_STRING      reduce using rule 13 (body -> LCHAV RCHAV .)
    BOO_BOOLEAN     reduce using rule 13 (body -> LCHAV RCHAV .)
    RCHAV           reduce using rule 13 (body -> LCHAV RCHAV .)
    ELSE            reduce using rule 13 (body -> LCHAV RCHAV .)


state 20

    (18) stms -> stm .
    (19) stms -> stm . stms
    (18) stms -> . stm
    (19) stms -> . stm stms
    (20) stm -> . exp SEMI_COLON
    (21) stm -> . WHILE LPAREN exp RPAREN body
    (22) stm -> . RETURN exp SEMI_COLON
    (23) stm -> . IF LPAREN exp RPAREN bodyorstm
    (24) stm -> . FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> . FOR LPAREN tipo ID IN ID RPAREN body
    (26) stm -> . declvar
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    RCHAV           reduce using rule 18 (stms -> stm .)
    WHILE           shift and go to state 22
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    stm                            shift and go to state 20
    stms                           shift and go to state 43
    exp                            shift and go to state 21
    tipo                           shift and go to state 27
    declvar                        shift and go to state 29
    call                           shift and go to state 33

state 21

    (20) stm -> exp . SEMI_COLON
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      shift and go to state 44
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 22

    (21) stm -> WHILE . LPAREN exp RPAREN body

    LPAREN          shift and go to state 69


state 23

    (60) exp -> LPAREN . exp RPAREN
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 70
    call                           shift and go to state 33

state 24

    (22) stm -> RETURN . exp SEMI_COLON
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 71
    call                           shift and go to state 33

state 25

    (23) stm -> IF . LPAREN exp RPAREN bodyorstm

    LPAREN          shift and go to state 72


state 26

    (24) stm -> FOR . LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> FOR . LPAREN tipo ID IN ID RPAREN body

    LPAREN          shift and go to state 73


state 27

    (5) declvar -> tipo . assign SEMI_COLON
    (6) declvar -> tipo . INTERROGATION ID SEMI_COLON
    (73) assign -> . ID RECEIVE_VALUE exp

    INTERROGATION   shift and go to state 16
    ID              shift and go to state 74

    assign                         shift and go to state 15

state 28

    (65) exp -> ID . RECEIVE_VALUE exp
    (66) exp -> ID .
    (34) call -> ID . LPAREN params RPAREN
    (35) call -> ID . LPAREN RPAREN

    RECEIVE_VALUE   shift and go to state 75
    SEMI_COLON      reduce using rule 66 (exp -> ID .)
    MORE            reduce using rule 66 (exp -> ID .)
    LESS            reduce using rule 66 (exp -> ID .)
    REST            reduce using rule 66 (exp -> ID .)
    MULTIPLICATION  reduce using rule 66 (exp -> ID .)
    DIVIDE          reduce using rule 66 (exp -> ID .)
    MORE_EQUAL      reduce using rule 66 (exp -> ID .)
    MORETHAN        reduce using rule 66 (exp -> ID .)
    LESS_EQUAL      reduce using rule 66 (exp -> ID .)
    LESSTHAN        reduce using rule 66 (exp -> ID .)
    AS              reduce using rule 66 (exp -> ID .)
    IS              reduce using rule 66 (exp -> ID .)
    IS_EXCLAMATION  reduce using rule 66 (exp -> ID .)
    EQUAL           reduce using rule 66 (exp -> ID .)
    EXCLAMATION_EQUAL reduce using rule 66 (exp -> ID .)
    AND             reduce using rule 66 (exp -> ID .)
    OR              reduce using rule 66 (exp -> ID .)
    IF_NULL         reduce using rule 66 (exp -> ID .)
    INTERROGATION   reduce using rule 66 (exp -> ID .)
    MULTIPLICATION_EQUAL reduce using rule 66 (exp -> ID .)
    DIVIDE_EQUAL    reduce using rule 66 (exp -> ID .)
    SOMA_EQUAL      reduce using rule 66 (exp -> ID .)
    SUB_EQUAL       reduce using rule 66 (exp -> ID .)
    MORE_MORE       reduce using rule 66 (exp -> ID .)
    LESS_LESS       reduce using rule 66 (exp -> ID .)
    RPAREN          reduce using rule 66 (exp -> ID .)
    VIRGULA         reduce using rule 66 (exp -> ID .)
    COLON           reduce using rule 66 (exp -> ID .)
    LPAREN          shift and go to state 76


state 29

    (26) stm -> declvar .

    WHILE           reduce using rule 26 (stm -> declvar .)
    RETURN          reduce using rule 26 (stm -> declvar .)
    IF              reduce using rule 26 (stm -> declvar .)
    FOR             reduce using rule 26 (stm -> declvar .)
    LPAREN          reduce using rule 26 (stm -> declvar .)
    AWAIT           reduce using rule 26 (stm -> declvar .)
    DOT_DOT         reduce using rule 26 (stm -> declvar .)
    INTERROGATION   reduce using rule 26 (stm -> declvar .)
    ID              reduce using rule 26 (stm -> declvar .)
    NUM_INT         reduce using rule 26 (stm -> declvar .)
    NUM_DOUBLE      reduce using rule 26 (stm -> declvar .)
    STR_STRING      reduce using rule 26 (stm -> declvar .)
    BOO_BOOLEAN     reduce using rule 26 (stm -> declvar .)
    TIPO_DOUBLE     reduce using rule 26 (stm -> declvar .)
    TIPO_INT        reduce using rule 26 (stm -> declvar .)
    TIPO_STRING     reduce using rule 26 (stm -> declvar .)
    TIPO_BOOLEAN    reduce using rule 26 (stm -> declvar .)
    TIPO_VOID       reduce using rule 26 (stm -> declvar .)
    RCHAV           reduce using rule 26 (stm -> declvar .)


state 30

    (63) exp -> INTERROGATION . DOT_DOT exp

    DOT_DOT         shift and go to state 77


state 31

    (61) exp -> AWAIT . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 78
    call                           shift and go to state 33

state 32

    (62) exp -> DOT_DOT . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 79
    call                           shift and go to state 33

state 33

    (64) exp -> call .

    SEMI_COLON      reduce using rule 64 (exp -> call .)
    MORE            reduce using rule 64 (exp -> call .)
    LESS            reduce using rule 64 (exp -> call .)
    REST            reduce using rule 64 (exp -> call .)
    MULTIPLICATION  reduce using rule 64 (exp -> call .)
    DIVIDE          reduce using rule 64 (exp -> call .)
    MORE_EQUAL      reduce using rule 64 (exp -> call .)
    MORETHAN        reduce using rule 64 (exp -> call .)
    LESS_EQUAL      reduce using rule 64 (exp -> call .)
    LESSTHAN        reduce using rule 64 (exp -> call .)
    AS              reduce using rule 64 (exp -> call .)
    IS              reduce using rule 64 (exp -> call .)
    IS_EXCLAMATION  reduce using rule 64 (exp -> call .)
    EQUAL           reduce using rule 64 (exp -> call .)
    EXCLAMATION_EQUAL reduce using rule 64 (exp -> call .)
    AND             reduce using rule 64 (exp -> call .)
    OR              reduce using rule 64 (exp -> call .)
    IF_NULL         reduce using rule 64 (exp -> call .)
    INTERROGATION   reduce using rule 64 (exp -> call .)
    MULTIPLICATION_EQUAL reduce using rule 64 (exp -> call .)
    DIVIDE_EQUAL    reduce using rule 64 (exp -> call .)
    SOMA_EQUAL      reduce using rule 64 (exp -> call .)
    SUB_EQUAL       reduce using rule 64 (exp -> call .)
    MORE_MORE       reduce using rule 64 (exp -> call .)
    LESS_LESS       reduce using rule 64 (exp -> call .)
    RPAREN          reduce using rule 64 (exp -> call .)
    VIRGULA         reduce using rule 64 (exp -> call .)
    COLON           reduce using rule 64 (exp -> call .)


state 34

    (67) exp -> NUM_INT .

    SEMI_COLON      reduce using rule 67 (exp -> NUM_INT .)
    MORE            reduce using rule 67 (exp -> NUM_INT .)
    LESS            reduce using rule 67 (exp -> NUM_INT .)
    REST            reduce using rule 67 (exp -> NUM_INT .)
    MULTIPLICATION  reduce using rule 67 (exp -> NUM_INT .)
    DIVIDE          reduce using rule 67 (exp -> NUM_INT .)
    MORE_EQUAL      reduce using rule 67 (exp -> NUM_INT .)
    MORETHAN        reduce using rule 67 (exp -> NUM_INT .)
    LESS_EQUAL      reduce using rule 67 (exp -> NUM_INT .)
    LESSTHAN        reduce using rule 67 (exp -> NUM_INT .)
    AS              reduce using rule 67 (exp -> NUM_INT .)
    IS              reduce using rule 67 (exp -> NUM_INT .)
    IS_EXCLAMATION  reduce using rule 67 (exp -> NUM_INT .)
    EQUAL           reduce using rule 67 (exp -> NUM_INT .)
    EXCLAMATION_EQUAL reduce using rule 67 (exp -> NUM_INT .)
    AND             reduce using rule 67 (exp -> NUM_INT .)
    OR              reduce using rule 67 (exp -> NUM_INT .)
    IF_NULL         reduce using rule 67 (exp -> NUM_INT .)
    INTERROGATION   reduce using rule 67 (exp -> NUM_INT .)
    MULTIPLICATION_EQUAL reduce using rule 67 (exp -> NUM_INT .)
    DIVIDE_EQUAL    reduce using rule 67 (exp -> NUM_INT .)
    SOMA_EQUAL      reduce using rule 67 (exp -> NUM_INT .)
    SUB_EQUAL       reduce using rule 67 (exp -> NUM_INT .)
    MORE_MORE       reduce using rule 67 (exp -> NUM_INT .)
    LESS_LESS       reduce using rule 67 (exp -> NUM_INT .)
    RPAREN          reduce using rule 67 (exp -> NUM_INT .)
    VIRGULA         reduce using rule 67 (exp -> NUM_INT .)
    COLON           reduce using rule 67 (exp -> NUM_INT .)


state 35

    (68) exp -> NUM_DOUBLE .

    SEMI_COLON      reduce using rule 68 (exp -> NUM_DOUBLE .)
    MORE            reduce using rule 68 (exp -> NUM_DOUBLE .)
    LESS            reduce using rule 68 (exp -> NUM_DOUBLE .)
    REST            reduce using rule 68 (exp -> NUM_DOUBLE .)
    MULTIPLICATION  reduce using rule 68 (exp -> NUM_DOUBLE .)
    DIVIDE          reduce using rule 68 (exp -> NUM_DOUBLE .)
    MORE_EQUAL      reduce using rule 68 (exp -> NUM_DOUBLE .)
    MORETHAN        reduce using rule 68 (exp -> NUM_DOUBLE .)
    LESS_EQUAL      reduce using rule 68 (exp -> NUM_DOUBLE .)
    LESSTHAN        reduce using rule 68 (exp -> NUM_DOUBLE .)
    AS              reduce using rule 68 (exp -> NUM_DOUBLE .)
    IS              reduce using rule 68 (exp -> NUM_DOUBLE .)
    IS_EXCLAMATION  reduce using rule 68 (exp -> NUM_DOUBLE .)
    EQUAL           reduce using rule 68 (exp -> NUM_DOUBLE .)
    EXCLAMATION_EQUAL reduce using rule 68 (exp -> NUM_DOUBLE .)
    AND             reduce using rule 68 (exp -> NUM_DOUBLE .)
    OR              reduce using rule 68 (exp -> NUM_DOUBLE .)
    IF_NULL         reduce using rule 68 (exp -> NUM_DOUBLE .)
    INTERROGATION   reduce using rule 68 (exp -> NUM_DOUBLE .)
    MULTIPLICATION_EQUAL reduce using rule 68 (exp -> NUM_DOUBLE .)
    DIVIDE_EQUAL    reduce using rule 68 (exp -> NUM_DOUBLE .)
    SOMA_EQUAL      reduce using rule 68 (exp -> NUM_DOUBLE .)
    SUB_EQUAL       reduce using rule 68 (exp -> NUM_DOUBLE .)
    MORE_MORE       reduce using rule 68 (exp -> NUM_DOUBLE .)
    LESS_LESS       reduce using rule 68 (exp -> NUM_DOUBLE .)
    RPAREN          reduce using rule 68 (exp -> NUM_DOUBLE .)
    VIRGULA         reduce using rule 68 (exp -> NUM_DOUBLE .)
    COLON           reduce using rule 68 (exp -> NUM_DOUBLE .)


state 36

    (69) exp -> STR_STRING .

    SEMI_COLON      reduce using rule 69 (exp -> STR_STRING .)
    MORE            reduce using rule 69 (exp -> STR_STRING .)
    LESS            reduce using rule 69 (exp -> STR_STRING .)
    REST            reduce using rule 69 (exp -> STR_STRING .)
    MULTIPLICATION  reduce using rule 69 (exp -> STR_STRING .)
    DIVIDE          reduce using rule 69 (exp -> STR_STRING .)
    MORE_EQUAL      reduce using rule 69 (exp -> STR_STRING .)
    MORETHAN        reduce using rule 69 (exp -> STR_STRING .)
    LESS_EQUAL      reduce using rule 69 (exp -> STR_STRING .)
    LESSTHAN        reduce using rule 69 (exp -> STR_STRING .)
    AS              reduce using rule 69 (exp -> STR_STRING .)
    IS              reduce using rule 69 (exp -> STR_STRING .)
    IS_EXCLAMATION  reduce using rule 69 (exp -> STR_STRING .)
    EQUAL           reduce using rule 69 (exp -> STR_STRING .)
    EXCLAMATION_EQUAL reduce using rule 69 (exp -> STR_STRING .)
    AND             reduce using rule 69 (exp -> STR_STRING .)
    OR              reduce using rule 69 (exp -> STR_STRING .)
    IF_NULL         reduce using rule 69 (exp -> STR_STRING .)
    INTERROGATION   reduce using rule 69 (exp -> STR_STRING .)
    MULTIPLICATION_EQUAL reduce using rule 69 (exp -> STR_STRING .)
    DIVIDE_EQUAL    reduce using rule 69 (exp -> STR_STRING .)
    SOMA_EQUAL      reduce using rule 69 (exp -> STR_STRING .)
    SUB_EQUAL       reduce using rule 69 (exp -> STR_STRING .)
    MORE_MORE       reduce using rule 69 (exp -> STR_STRING .)
    LESS_LESS       reduce using rule 69 (exp -> STR_STRING .)
    RPAREN          reduce using rule 69 (exp -> STR_STRING .)
    VIRGULA         reduce using rule 69 (exp -> STR_STRING .)
    COLON           reduce using rule 69 (exp -> STR_STRING .)


state 37

    (70) exp -> BOO_BOOLEAN .

    SEMI_COLON      reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MORE            reduce using rule 70 (exp -> BOO_BOOLEAN .)
    LESS            reduce using rule 70 (exp -> BOO_BOOLEAN .)
    REST            reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MULTIPLICATION  reduce using rule 70 (exp -> BOO_BOOLEAN .)
    DIVIDE          reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MORE_EQUAL      reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MORETHAN        reduce using rule 70 (exp -> BOO_BOOLEAN .)
    LESS_EQUAL      reduce using rule 70 (exp -> BOO_BOOLEAN .)
    LESSTHAN        reduce using rule 70 (exp -> BOO_BOOLEAN .)
    AS              reduce using rule 70 (exp -> BOO_BOOLEAN .)
    IS              reduce using rule 70 (exp -> BOO_BOOLEAN .)
    IS_EXCLAMATION  reduce using rule 70 (exp -> BOO_BOOLEAN .)
    EQUAL           reduce using rule 70 (exp -> BOO_BOOLEAN .)
    EXCLAMATION_EQUAL reduce using rule 70 (exp -> BOO_BOOLEAN .)
    AND             reduce using rule 70 (exp -> BOO_BOOLEAN .)
    OR              reduce using rule 70 (exp -> BOO_BOOLEAN .)
    IF_NULL         reduce using rule 70 (exp -> BOO_BOOLEAN .)
    INTERROGATION   reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MULTIPLICATION_EQUAL reduce using rule 70 (exp -> BOO_BOOLEAN .)
    DIVIDE_EQUAL    reduce using rule 70 (exp -> BOO_BOOLEAN .)
    SOMA_EQUAL      reduce using rule 70 (exp -> BOO_BOOLEAN .)
    SUB_EQUAL       reduce using rule 70 (exp -> BOO_BOOLEAN .)
    MORE_MORE       reduce using rule 70 (exp -> BOO_BOOLEAN .)
    LESS_LESS       reduce using rule 70 (exp -> BOO_BOOLEAN .)
    RPAREN          reduce using rule 70 (exp -> BOO_BOOLEAN .)
    VIRGULA         reduce using rule 70 (exp -> BOO_BOOLEAN .)
    COLON           reduce using rule 70 (exp -> BOO_BOOLEAN .)


state 38

    (5) declvar -> tipo assign SEMI_COLON .

    TIPO_DOUBLE     reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    TIPO_INT        reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    TIPO_STRING     reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    TIPO_BOOLEAN    reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    TIPO_VOID       reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    $end            reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    WHILE           reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    RETURN          reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    IF              reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    FOR             reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    LPAREN          reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    AWAIT           reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    DOT_DOT         reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    INTERROGATION   reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    ID              reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    NUM_INT         reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    NUM_DOUBLE      reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    STR_STRING      reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    BOO_BOOLEAN     reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)
    RCHAV           reduce using rule 5 (declvar -> tipo assign SEMI_COLON .)


state 39

    (6) declvar -> tipo INTERROGATION ID . SEMI_COLON

    SEMI_COLON      shift and go to state 80


state 40

    (8) signature -> tipo ID LPAREN . sigParams RPAREN
    (9) signature -> tipo ID LPAREN . RPAREN
    (10) sigParams -> . tipo ID
    (11) sigParams -> . tipo ID VIRGULA sigParams
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    RPAREN          shift and go to state 83
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    tipo                           shift and go to state 81
    sigParams                      shift and go to state 82

state 41

    (73) assign -> ID RECEIVE_VALUE . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 84
    call                           shift and go to state 33

state 42

    (12) body -> LCHAV stms RCHAV .

    TIPO_DOUBLE     reduce using rule 12 (body -> LCHAV stms RCHAV .)
    TIPO_INT        reduce using rule 12 (body -> LCHAV stms RCHAV .)
    TIPO_STRING     reduce using rule 12 (body -> LCHAV stms RCHAV .)
    TIPO_BOOLEAN    reduce using rule 12 (body -> LCHAV stms RCHAV .)
    TIPO_VOID       reduce using rule 12 (body -> LCHAV stms RCHAV .)
    $end            reduce using rule 12 (body -> LCHAV stms RCHAV .)
    WHILE           reduce using rule 12 (body -> LCHAV stms RCHAV .)
    RETURN          reduce using rule 12 (body -> LCHAV stms RCHAV .)
    IF              reduce using rule 12 (body -> LCHAV stms RCHAV .)
    FOR             reduce using rule 12 (body -> LCHAV stms RCHAV .)
    LPAREN          reduce using rule 12 (body -> LCHAV stms RCHAV .)
    AWAIT           reduce using rule 12 (body -> LCHAV stms RCHAV .)
    DOT_DOT         reduce using rule 12 (body -> LCHAV stms RCHAV .)
    INTERROGATION   reduce using rule 12 (body -> LCHAV stms RCHAV .)
    ID              reduce using rule 12 (body -> LCHAV stms RCHAV .)
    NUM_INT         reduce using rule 12 (body -> LCHAV stms RCHAV .)
    NUM_DOUBLE      reduce using rule 12 (body -> LCHAV stms RCHAV .)
    STR_STRING      reduce using rule 12 (body -> LCHAV stms RCHAV .)
    BOO_BOOLEAN     reduce using rule 12 (body -> LCHAV stms RCHAV .)
    RCHAV           reduce using rule 12 (body -> LCHAV stms RCHAV .)
    ELSE            reduce using rule 12 (body -> LCHAV stms RCHAV .)


state 43

    (19) stms -> stm stms .

    RCHAV           reduce using rule 19 (stms -> stm stms .)


state 44

    (20) stm -> exp SEMI_COLON .

    WHILE           reduce using rule 20 (stm -> exp SEMI_COLON .)
    RETURN          reduce using rule 20 (stm -> exp SEMI_COLON .)
    IF              reduce using rule 20 (stm -> exp SEMI_COLON .)
    FOR             reduce using rule 20 (stm -> exp SEMI_COLON .)
    LPAREN          reduce using rule 20 (stm -> exp SEMI_COLON .)
    AWAIT           reduce using rule 20 (stm -> exp SEMI_COLON .)
    DOT_DOT         reduce using rule 20 (stm -> exp SEMI_COLON .)
    INTERROGATION   reduce using rule 20 (stm -> exp SEMI_COLON .)
    ID              reduce using rule 20 (stm -> exp SEMI_COLON .)
    NUM_INT         reduce using rule 20 (stm -> exp SEMI_COLON .)
    NUM_DOUBLE      reduce using rule 20 (stm -> exp SEMI_COLON .)
    STR_STRING      reduce using rule 20 (stm -> exp SEMI_COLON .)
    BOO_BOOLEAN     reduce using rule 20 (stm -> exp SEMI_COLON .)
    TIPO_DOUBLE     reduce using rule 20 (stm -> exp SEMI_COLON .)
    TIPO_INT        reduce using rule 20 (stm -> exp SEMI_COLON .)
    TIPO_STRING     reduce using rule 20 (stm -> exp SEMI_COLON .)
    TIPO_BOOLEAN    reduce using rule 20 (stm -> exp SEMI_COLON .)
    TIPO_VOID       reduce using rule 20 (stm -> exp SEMI_COLON .)
    RCHAV           reduce using rule 20 (stm -> exp SEMI_COLON .)


state 45

    (36) exp -> exp MORE . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 85
    call                           shift and go to state 33

state 46

    (37) exp -> exp LESS . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 86
    call                           shift and go to state 33

state 47

    (38) exp -> exp REST . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 87
    call                           shift and go to state 33

state 48

    (39) exp -> exp MULTIPLICATION . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 88
    call                           shift and go to state 33

state 49

    (40) exp -> exp DIVIDE . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 89
    call                           shift and go to state 33

state 50

    (41) exp -> exp MORE_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 90
    call                           shift and go to state 33

state 51

    (42) exp -> exp MORETHAN . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 91
    call                           shift and go to state 33

state 52

    (43) exp -> exp LESS_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 92
    call                           shift and go to state 33

state 53

    (44) exp -> exp LESSTHAN . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 93
    call                           shift and go to state 33

state 54

    (45) exp -> exp AS . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 94
    call                           shift and go to state 33

state 55

    (46) exp -> exp IS . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 95
    call                           shift and go to state 33

state 56

    (47) exp -> exp IS_EXCLAMATION . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 96
    call                           shift and go to state 33

state 57

    (48) exp -> exp EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 97
    call                           shift and go to state 33

state 58

    (49) exp -> exp EXCLAMATION_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 98
    call                           shift and go to state 33

state 59

    (50) exp -> exp AND . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 99
    call                           shift and go to state 33

state 60

    (51) exp -> exp OR . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 100
    call                           shift and go to state 33

state 61

    (52) exp -> exp IF_NULL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 101
    call                           shift and go to state 33

state 62

    (53) exp -> exp INTERROGATION . exp COLON exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 102
    call                           shift and go to state 33

state 63

    (54) exp -> exp MULTIPLICATION_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 103
    call                           shift and go to state 33

state 64

    (55) exp -> exp DIVIDE_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 104
    call                           shift and go to state 33

state 65

    (56) exp -> exp SOMA_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 105
    call                           shift and go to state 33

state 66

    (57) exp -> exp SUB_EQUAL . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 106
    call                           shift and go to state 33

state 67

    (58) exp -> exp MORE_MORE .

    SEMI_COLON      reduce using rule 58 (exp -> exp MORE_MORE .)
    MORE            reduce using rule 58 (exp -> exp MORE_MORE .)
    LESS            reduce using rule 58 (exp -> exp MORE_MORE .)
    REST            reduce using rule 58 (exp -> exp MORE_MORE .)
    MULTIPLICATION  reduce using rule 58 (exp -> exp MORE_MORE .)
    DIVIDE          reduce using rule 58 (exp -> exp MORE_MORE .)
    MORE_EQUAL      reduce using rule 58 (exp -> exp MORE_MORE .)
    MORETHAN        reduce using rule 58 (exp -> exp MORE_MORE .)
    LESS_EQUAL      reduce using rule 58 (exp -> exp MORE_MORE .)
    LESSTHAN        reduce using rule 58 (exp -> exp MORE_MORE .)
    AS              reduce using rule 58 (exp -> exp MORE_MORE .)
    IS              reduce using rule 58 (exp -> exp MORE_MORE .)
    IS_EXCLAMATION  reduce using rule 58 (exp -> exp MORE_MORE .)
    EQUAL           reduce using rule 58 (exp -> exp MORE_MORE .)
    EXCLAMATION_EQUAL reduce using rule 58 (exp -> exp MORE_MORE .)
    AND             reduce using rule 58 (exp -> exp MORE_MORE .)
    OR              reduce using rule 58 (exp -> exp MORE_MORE .)
    IF_NULL         reduce using rule 58 (exp -> exp MORE_MORE .)
    INTERROGATION   reduce using rule 58 (exp -> exp MORE_MORE .)
    MULTIPLICATION_EQUAL reduce using rule 58 (exp -> exp MORE_MORE .)
    DIVIDE_EQUAL    reduce using rule 58 (exp -> exp MORE_MORE .)
    SOMA_EQUAL      reduce using rule 58 (exp -> exp MORE_MORE .)
    SUB_EQUAL       reduce using rule 58 (exp -> exp MORE_MORE .)
    MORE_MORE       reduce using rule 58 (exp -> exp MORE_MORE .)
    LESS_LESS       reduce using rule 58 (exp -> exp MORE_MORE .)
    RPAREN          reduce using rule 58 (exp -> exp MORE_MORE .)
    VIRGULA         reduce using rule 58 (exp -> exp MORE_MORE .)
    COLON           reduce using rule 58 (exp -> exp MORE_MORE .)


state 68

    (59) exp -> exp LESS_LESS .

    SEMI_COLON      reduce using rule 59 (exp -> exp LESS_LESS .)
    MORE            reduce using rule 59 (exp -> exp LESS_LESS .)
    LESS            reduce using rule 59 (exp -> exp LESS_LESS .)
    REST            reduce using rule 59 (exp -> exp LESS_LESS .)
    MULTIPLICATION  reduce using rule 59 (exp -> exp LESS_LESS .)
    DIVIDE          reduce using rule 59 (exp -> exp LESS_LESS .)
    MORE_EQUAL      reduce using rule 59 (exp -> exp LESS_LESS .)
    MORETHAN        reduce using rule 59 (exp -> exp LESS_LESS .)
    LESS_EQUAL      reduce using rule 59 (exp -> exp LESS_LESS .)
    LESSTHAN        reduce using rule 59 (exp -> exp LESS_LESS .)
    AS              reduce using rule 59 (exp -> exp LESS_LESS .)
    IS              reduce using rule 59 (exp -> exp LESS_LESS .)
    IS_EXCLAMATION  reduce using rule 59 (exp -> exp LESS_LESS .)
    EQUAL           reduce using rule 59 (exp -> exp LESS_LESS .)
    EXCLAMATION_EQUAL reduce using rule 59 (exp -> exp LESS_LESS .)
    AND             reduce using rule 59 (exp -> exp LESS_LESS .)
    OR              reduce using rule 59 (exp -> exp LESS_LESS .)
    IF_NULL         reduce using rule 59 (exp -> exp LESS_LESS .)
    INTERROGATION   reduce using rule 59 (exp -> exp LESS_LESS .)
    MULTIPLICATION_EQUAL reduce using rule 59 (exp -> exp LESS_LESS .)
    DIVIDE_EQUAL    reduce using rule 59 (exp -> exp LESS_LESS .)
    SOMA_EQUAL      reduce using rule 59 (exp -> exp LESS_LESS .)
    SUB_EQUAL       reduce using rule 59 (exp -> exp LESS_LESS .)
    MORE_MORE       reduce using rule 59 (exp -> exp LESS_LESS .)
    LESS_LESS       reduce using rule 59 (exp -> exp LESS_LESS .)
    RPAREN          reduce using rule 59 (exp -> exp LESS_LESS .)
    VIRGULA         reduce using rule 59 (exp -> exp LESS_LESS .)
    COLON           reduce using rule 59 (exp -> exp LESS_LESS .)


state 69

    (21) stm -> WHILE LPAREN . exp RPAREN body
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 107
    call                           shift and go to state 33

state 70

    (60) exp -> LPAREN exp . RPAREN
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    RPAREN          shift and go to state 108
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 71

    (22) stm -> RETURN exp . SEMI_COLON
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      shift and go to state 109
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 72

    (23) stm -> IF LPAREN . exp RPAREN bodyorstm
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 110
    call                           shift and go to state 33

state 73

    (24) stm -> FOR LPAREN . tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> FOR LPAREN . tipo ID IN ID RPAREN body
    (27) tiposassign -> . tipo assign
    (28) tiposassign -> . tipo assign VIRGULA tipoassigns
    (29) tiposassign -> .
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    SEMI_COLON      reduce using rule 29 (tiposassign -> .)
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    tiposassign                    shift and go to state 111
    tipo                           shift and go to state 112

state 74

    (73) assign -> ID . RECEIVE_VALUE exp

    RECEIVE_VALUE   shift and go to state 41


state 75

    (65) exp -> ID RECEIVE_VALUE . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 113
    call                           shift and go to state 33

state 76

    (34) call -> ID LPAREN . params RPAREN
    (35) call -> ID LPAREN . RPAREN
    (71) params -> . exp VIRGULA params
    (72) params -> . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 115
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    params                         shift and go to state 114
    exp                            shift and go to state 116
    call                           shift and go to state 33

state 77

    (63) exp -> INTERROGATION DOT_DOT . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 117
    call                           shift and go to state 33

state 78

    (61) exp -> AWAIT exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 61 (exp -> AWAIT exp .)
    MORE            reduce using rule 61 (exp -> AWAIT exp .)
    LESS            reduce using rule 61 (exp -> AWAIT exp .)
    REST            reduce using rule 61 (exp -> AWAIT exp .)
    MULTIPLICATION  reduce using rule 61 (exp -> AWAIT exp .)
    DIVIDE          reduce using rule 61 (exp -> AWAIT exp .)
    MORE_EQUAL      reduce using rule 61 (exp -> AWAIT exp .)
    MORETHAN        reduce using rule 61 (exp -> AWAIT exp .)
    LESS_EQUAL      reduce using rule 61 (exp -> AWAIT exp .)
    LESSTHAN        reduce using rule 61 (exp -> AWAIT exp .)
    AS              reduce using rule 61 (exp -> AWAIT exp .)
    IS              reduce using rule 61 (exp -> AWAIT exp .)
    IS_EXCLAMATION  reduce using rule 61 (exp -> AWAIT exp .)
    EQUAL           reduce using rule 61 (exp -> AWAIT exp .)
    EXCLAMATION_EQUAL reduce using rule 61 (exp -> AWAIT exp .)
    AND             reduce using rule 61 (exp -> AWAIT exp .)
    OR              reduce using rule 61 (exp -> AWAIT exp .)
    IF_NULL         reduce using rule 61 (exp -> AWAIT exp .)
    INTERROGATION   reduce using rule 61 (exp -> AWAIT exp .)
    MULTIPLICATION_EQUAL reduce using rule 61 (exp -> AWAIT exp .)
    DIVIDE_EQUAL    reduce using rule 61 (exp -> AWAIT exp .)
    SOMA_EQUAL      reduce using rule 61 (exp -> AWAIT exp .)
    SUB_EQUAL       reduce using rule 61 (exp -> AWAIT exp .)
    MORE_MORE       reduce using rule 61 (exp -> AWAIT exp .)
    LESS_LESS       reduce using rule 61 (exp -> AWAIT exp .)
    RPAREN          reduce using rule 61 (exp -> AWAIT exp .)
    VIRGULA         reduce using rule 61 (exp -> AWAIT exp .)
    COLON           reduce using rule 61 (exp -> AWAIT exp .)

  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! REST            [ shift and go to state 47 ]
  ! MULTIPLICATION  [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]
  ! MORE_MORE       [ shift and go to state 67 ]
  ! LESS_LESS       [ shift and go to state 68 ]


state 79

    (62) exp -> DOT_DOT exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 62 (exp -> DOT_DOT exp .)
    MULTIPLICATION_EQUAL reduce using rule 62 (exp -> DOT_DOT exp .)
    DIVIDE_EQUAL    reduce using rule 62 (exp -> DOT_DOT exp .)
    SOMA_EQUAL      reduce using rule 62 (exp -> DOT_DOT exp .)
    SUB_EQUAL       reduce using rule 62 (exp -> DOT_DOT exp .)
    RPAREN          reduce using rule 62 (exp -> DOT_DOT exp .)
    VIRGULA         reduce using rule 62 (exp -> DOT_DOT exp .)
    COLON           reduce using rule 62 (exp -> DOT_DOT exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! LESS            [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! REST            [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! MULTIPLICATION  [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! MORE_EQUAL      [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! MORETHAN        [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! LESS_EQUAL      [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! LESSTHAN        [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! AS              [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! IS              [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! EQUAL           [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! AND             [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! OR              [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! IF_NULL         [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! INTERROGATION   [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! MORE_MORE       [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! LESS_LESS       [ reduce using rule 62 (exp -> DOT_DOT exp .) ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 80

    (6) declvar -> tipo INTERROGATION ID SEMI_COLON .

    TIPO_DOUBLE     reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    TIPO_INT        reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    TIPO_STRING     reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    TIPO_BOOLEAN    reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    TIPO_VOID       reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    $end            reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    WHILE           reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    RETURN          reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    IF              reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    FOR             reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    LPAREN          reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    AWAIT           reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    DOT_DOT         reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    INTERROGATION   reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    ID              reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    NUM_INT         reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    NUM_DOUBLE      reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    STR_STRING      reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    BOO_BOOLEAN     reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)
    RCHAV           reduce using rule 6 (declvar -> tipo INTERROGATION ID SEMI_COLON .)


state 81

    (10) sigParams -> tipo . ID
    (11) sigParams -> tipo . ID VIRGULA sigParams

    ID              shift and go to state 118


state 82

    (8) signature -> tipo ID LPAREN sigParams . RPAREN

    RPAREN          shift and go to state 119


state 83

    (9) signature -> tipo ID LPAREN RPAREN .

    LCHAV           reduce using rule 9 (signature -> tipo ID LPAREN RPAREN .)


state 84

    (73) assign -> ID RECEIVE_VALUE exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 73 (assign -> ID RECEIVE_VALUE exp .)
    VIRGULA         reduce using rule 73 (assign -> ID RECEIVE_VALUE exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 85

    (36) exp -> exp MORE exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 36 (exp -> exp MORE exp .)
    MORE            reduce using rule 36 (exp -> exp MORE exp .)
    LESS            reduce using rule 36 (exp -> exp MORE exp .)
    MORE_EQUAL      reduce using rule 36 (exp -> exp MORE exp .)
    MORETHAN        reduce using rule 36 (exp -> exp MORE exp .)
    LESS_EQUAL      reduce using rule 36 (exp -> exp MORE exp .)
    LESSTHAN        reduce using rule 36 (exp -> exp MORE exp .)
    AS              reduce using rule 36 (exp -> exp MORE exp .)
    IS              reduce using rule 36 (exp -> exp MORE exp .)
    IS_EXCLAMATION  reduce using rule 36 (exp -> exp MORE exp .)
    EQUAL           reduce using rule 36 (exp -> exp MORE exp .)
    EXCLAMATION_EQUAL reduce using rule 36 (exp -> exp MORE exp .)
    AND             reduce using rule 36 (exp -> exp MORE exp .)
    OR              reduce using rule 36 (exp -> exp MORE exp .)
    IF_NULL         reduce using rule 36 (exp -> exp MORE exp .)
    INTERROGATION   reduce using rule 36 (exp -> exp MORE exp .)
    MULTIPLICATION_EQUAL reduce using rule 36 (exp -> exp MORE exp .)
    DIVIDE_EQUAL    reduce using rule 36 (exp -> exp MORE exp .)
    SOMA_EQUAL      reduce using rule 36 (exp -> exp MORE exp .)
    SUB_EQUAL       reduce using rule 36 (exp -> exp MORE exp .)
    RPAREN          reduce using rule 36 (exp -> exp MORE exp .)
    VIRGULA         reduce using rule 36 (exp -> exp MORE exp .)
    COLON           reduce using rule 36 (exp -> exp MORE exp .)
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! REST            [ reduce using rule 36 (exp -> exp MORE exp .) ]
  ! MULTIPLICATION  [ reduce using rule 36 (exp -> exp MORE exp .) ]
  ! DIVIDE          [ reduce using rule 36 (exp -> exp MORE exp .) ]
  ! MORE_MORE       [ reduce using rule 36 (exp -> exp MORE exp .) ]
  ! LESS_LESS       [ reduce using rule 36 (exp -> exp MORE exp .) ]
  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 86

    (37) exp -> exp LESS exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 37 (exp -> exp LESS exp .)
    MORE            reduce using rule 37 (exp -> exp LESS exp .)
    LESS            reduce using rule 37 (exp -> exp LESS exp .)
    MORE_EQUAL      reduce using rule 37 (exp -> exp LESS exp .)
    MORETHAN        reduce using rule 37 (exp -> exp LESS exp .)
    LESS_EQUAL      reduce using rule 37 (exp -> exp LESS exp .)
    LESSTHAN        reduce using rule 37 (exp -> exp LESS exp .)
    AS              reduce using rule 37 (exp -> exp LESS exp .)
    IS              reduce using rule 37 (exp -> exp LESS exp .)
    IS_EXCLAMATION  reduce using rule 37 (exp -> exp LESS exp .)
    EQUAL           reduce using rule 37 (exp -> exp LESS exp .)
    EXCLAMATION_EQUAL reduce using rule 37 (exp -> exp LESS exp .)
    AND             reduce using rule 37 (exp -> exp LESS exp .)
    OR              reduce using rule 37 (exp -> exp LESS exp .)
    IF_NULL         reduce using rule 37 (exp -> exp LESS exp .)
    INTERROGATION   reduce using rule 37 (exp -> exp LESS exp .)
    MULTIPLICATION_EQUAL reduce using rule 37 (exp -> exp LESS exp .)
    DIVIDE_EQUAL    reduce using rule 37 (exp -> exp LESS exp .)
    SOMA_EQUAL      reduce using rule 37 (exp -> exp LESS exp .)
    SUB_EQUAL       reduce using rule 37 (exp -> exp LESS exp .)
    RPAREN          reduce using rule 37 (exp -> exp LESS exp .)
    VIRGULA         reduce using rule 37 (exp -> exp LESS exp .)
    COLON           reduce using rule 37 (exp -> exp LESS exp .)
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! REST            [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MULTIPLICATION  [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! DIVIDE          [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MORE_MORE       [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! LESS_LESS       [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 87

    (38) exp -> exp REST exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 38 (exp -> exp REST exp .)
    MORE            reduce using rule 38 (exp -> exp REST exp .)
    LESS            reduce using rule 38 (exp -> exp REST exp .)
    REST            reduce using rule 38 (exp -> exp REST exp .)
    MULTIPLICATION  reduce using rule 38 (exp -> exp REST exp .)
    DIVIDE          reduce using rule 38 (exp -> exp REST exp .)
    MORE_EQUAL      reduce using rule 38 (exp -> exp REST exp .)
    MORETHAN        reduce using rule 38 (exp -> exp REST exp .)
    LESS_EQUAL      reduce using rule 38 (exp -> exp REST exp .)
    LESSTHAN        reduce using rule 38 (exp -> exp REST exp .)
    AS              reduce using rule 38 (exp -> exp REST exp .)
    IS              reduce using rule 38 (exp -> exp REST exp .)
    IS_EXCLAMATION  reduce using rule 38 (exp -> exp REST exp .)
    EQUAL           reduce using rule 38 (exp -> exp REST exp .)
    EXCLAMATION_EQUAL reduce using rule 38 (exp -> exp REST exp .)
    AND             reduce using rule 38 (exp -> exp REST exp .)
    OR              reduce using rule 38 (exp -> exp REST exp .)
    IF_NULL         reduce using rule 38 (exp -> exp REST exp .)
    INTERROGATION   reduce using rule 38 (exp -> exp REST exp .)
    MULTIPLICATION_EQUAL reduce using rule 38 (exp -> exp REST exp .)
    DIVIDE_EQUAL    reduce using rule 38 (exp -> exp REST exp .)
    SOMA_EQUAL      reduce using rule 38 (exp -> exp REST exp .)
    SUB_EQUAL       reduce using rule 38 (exp -> exp REST exp .)
    RPAREN          reduce using rule 38 (exp -> exp REST exp .)
    VIRGULA         reduce using rule 38 (exp -> exp REST exp .)
    COLON           reduce using rule 38 (exp -> exp REST exp .)
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE_MORE       [ reduce using rule 38 (exp -> exp REST exp .) ]
  ! LESS_LESS       [ reduce using rule 38 (exp -> exp REST exp .) ]
  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! REST            [ shift and go to state 47 ]
  ! MULTIPLICATION  [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 88

    (39) exp -> exp MULTIPLICATION exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MORE            reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    LESS            reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    REST            reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MULTIPLICATION  reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    DIVIDE          reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MORE_EQUAL      reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MORETHAN        reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    LESS_EQUAL      reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    LESSTHAN        reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    AS              reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    IS              reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    IS_EXCLAMATION  reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    EQUAL           reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    EXCLAMATION_EQUAL reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    AND             reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    OR              reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    IF_NULL         reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    INTERROGATION   reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MULTIPLICATION_EQUAL reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    DIVIDE_EQUAL    reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    SOMA_EQUAL      reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    SUB_EQUAL       reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    RPAREN          reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    VIRGULA         reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    COLON           reduce using rule 39 (exp -> exp MULTIPLICATION exp .)
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE_MORE       [ reduce using rule 39 (exp -> exp MULTIPLICATION exp .) ]
  ! LESS_LESS       [ reduce using rule 39 (exp -> exp MULTIPLICATION exp .) ]
  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! REST            [ shift and go to state 47 ]
  ! MULTIPLICATION  [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 89

    (40) exp -> exp DIVIDE exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 40 (exp -> exp DIVIDE exp .)
    MORE            reduce using rule 40 (exp -> exp DIVIDE exp .)
    LESS            reduce using rule 40 (exp -> exp DIVIDE exp .)
    REST            reduce using rule 40 (exp -> exp DIVIDE exp .)
    MULTIPLICATION  reduce using rule 40 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 40 (exp -> exp DIVIDE exp .)
    MORE_EQUAL      reduce using rule 40 (exp -> exp DIVIDE exp .)
    MORETHAN        reduce using rule 40 (exp -> exp DIVIDE exp .)
    LESS_EQUAL      reduce using rule 40 (exp -> exp DIVIDE exp .)
    LESSTHAN        reduce using rule 40 (exp -> exp DIVIDE exp .)
    AS              reduce using rule 40 (exp -> exp DIVIDE exp .)
    IS              reduce using rule 40 (exp -> exp DIVIDE exp .)
    IS_EXCLAMATION  reduce using rule 40 (exp -> exp DIVIDE exp .)
    EQUAL           reduce using rule 40 (exp -> exp DIVIDE exp .)
    EXCLAMATION_EQUAL reduce using rule 40 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 40 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 40 (exp -> exp DIVIDE exp .)
    IF_NULL         reduce using rule 40 (exp -> exp DIVIDE exp .)
    INTERROGATION   reduce using rule 40 (exp -> exp DIVIDE exp .)
    MULTIPLICATION_EQUAL reduce using rule 40 (exp -> exp DIVIDE exp .)
    DIVIDE_EQUAL    reduce using rule 40 (exp -> exp DIVIDE exp .)
    SOMA_EQUAL      reduce using rule 40 (exp -> exp DIVIDE exp .)
    SUB_EQUAL       reduce using rule 40 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 40 (exp -> exp DIVIDE exp .)
    VIRGULA         reduce using rule 40 (exp -> exp DIVIDE exp .)
    COLON           reduce using rule 40 (exp -> exp DIVIDE exp .)
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE_MORE       [ reduce using rule 40 (exp -> exp DIVIDE exp .) ]
  ! LESS_LESS       [ reduce using rule 40 (exp -> exp DIVIDE exp .) ]
  ! MORE            [ shift and go to state 45 ]
  ! LESS            [ shift and go to state 46 ]
  ! REST            [ shift and go to state 47 ]
  ! MULTIPLICATION  [ shift and go to state 48 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 90

    (41) exp -> exp MORE_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    MORE_EQUAL      reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    MORETHAN        reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    LESS_EQUAL      reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    LESSTHAN        reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    AS              reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    IS              reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    IS_EXCLAMATION  reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    EQUAL           reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    EXCLAMATION_EQUAL reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    AND             reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    OR              reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    IF_NULL         reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    INTERROGATION   reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    MULTIPLICATION_EQUAL reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    DIVIDE_EQUAL    reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    SOMA_EQUAL      reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    SUB_EQUAL       reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    RPAREN          reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    VIRGULA         reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    COLON           reduce using rule 41 (exp -> exp MORE_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! LESS            [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! REST            [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 41 (exp -> exp MORE_EQUAL exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 91

    (42) exp -> exp MORETHAN exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 42 (exp -> exp MORETHAN exp .)
    MORE_EQUAL      reduce using rule 42 (exp -> exp MORETHAN exp .)
    MORETHAN        reduce using rule 42 (exp -> exp MORETHAN exp .)
    LESS_EQUAL      reduce using rule 42 (exp -> exp MORETHAN exp .)
    LESSTHAN        reduce using rule 42 (exp -> exp MORETHAN exp .)
    AS              reduce using rule 42 (exp -> exp MORETHAN exp .)
    IS              reduce using rule 42 (exp -> exp MORETHAN exp .)
    IS_EXCLAMATION  reduce using rule 42 (exp -> exp MORETHAN exp .)
    EQUAL           reduce using rule 42 (exp -> exp MORETHAN exp .)
    EXCLAMATION_EQUAL reduce using rule 42 (exp -> exp MORETHAN exp .)
    AND             reduce using rule 42 (exp -> exp MORETHAN exp .)
    OR              reduce using rule 42 (exp -> exp MORETHAN exp .)
    IF_NULL         reduce using rule 42 (exp -> exp MORETHAN exp .)
    INTERROGATION   reduce using rule 42 (exp -> exp MORETHAN exp .)
    MULTIPLICATION_EQUAL reduce using rule 42 (exp -> exp MORETHAN exp .)
    DIVIDE_EQUAL    reduce using rule 42 (exp -> exp MORETHAN exp .)
    SOMA_EQUAL      reduce using rule 42 (exp -> exp MORETHAN exp .)
    SUB_EQUAL       reduce using rule 42 (exp -> exp MORETHAN exp .)
    RPAREN          reduce using rule 42 (exp -> exp MORETHAN exp .)
    VIRGULA         reduce using rule 42 (exp -> exp MORETHAN exp .)
    COLON           reduce using rule 42 (exp -> exp MORETHAN exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! LESS            [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! REST            [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! DIVIDE          [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! MORE_MORE       [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! LESS_LESS       [ reduce using rule 42 (exp -> exp MORETHAN exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 92

    (43) exp -> exp LESS_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    MORE_EQUAL      reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    MORETHAN        reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    LESS_EQUAL      reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    LESSTHAN        reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    AS              reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    IS              reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    IS_EXCLAMATION  reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    EQUAL           reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    EXCLAMATION_EQUAL reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    AND             reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    IF_NULL         reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    INTERROGATION   reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    MULTIPLICATION_EQUAL reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    DIVIDE_EQUAL    reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    SOMA_EQUAL      reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    SUB_EQUAL       reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    RPAREN          reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    VIRGULA         reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    COLON           reduce using rule 43 (exp -> exp LESS_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! LESS            [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! REST            [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 43 (exp -> exp LESS_EQUAL exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 93

    (44) exp -> exp LESSTHAN exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 44 (exp -> exp LESSTHAN exp .)
    MORE_EQUAL      reduce using rule 44 (exp -> exp LESSTHAN exp .)
    MORETHAN        reduce using rule 44 (exp -> exp LESSTHAN exp .)
    LESS_EQUAL      reduce using rule 44 (exp -> exp LESSTHAN exp .)
    LESSTHAN        reduce using rule 44 (exp -> exp LESSTHAN exp .)
    AS              reduce using rule 44 (exp -> exp LESSTHAN exp .)
    IS              reduce using rule 44 (exp -> exp LESSTHAN exp .)
    IS_EXCLAMATION  reduce using rule 44 (exp -> exp LESSTHAN exp .)
    EQUAL           reduce using rule 44 (exp -> exp LESSTHAN exp .)
    EXCLAMATION_EQUAL reduce using rule 44 (exp -> exp LESSTHAN exp .)
    AND             reduce using rule 44 (exp -> exp LESSTHAN exp .)
    OR              reduce using rule 44 (exp -> exp LESSTHAN exp .)
    IF_NULL         reduce using rule 44 (exp -> exp LESSTHAN exp .)
    INTERROGATION   reduce using rule 44 (exp -> exp LESSTHAN exp .)
    MULTIPLICATION_EQUAL reduce using rule 44 (exp -> exp LESSTHAN exp .)
    DIVIDE_EQUAL    reduce using rule 44 (exp -> exp LESSTHAN exp .)
    SOMA_EQUAL      reduce using rule 44 (exp -> exp LESSTHAN exp .)
    SUB_EQUAL       reduce using rule 44 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 44 (exp -> exp LESSTHAN exp .)
    VIRGULA         reduce using rule 44 (exp -> exp LESSTHAN exp .)
    COLON           reduce using rule 44 (exp -> exp LESSTHAN exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! LESS            [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! REST            [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! MORE_MORE       [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! LESS_LESS       [ reduce using rule 44 (exp -> exp LESSTHAN exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 94

    (45) exp -> exp AS exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 45 (exp -> exp AS exp .)
    MORE_EQUAL      reduce using rule 45 (exp -> exp AS exp .)
    MORETHAN        reduce using rule 45 (exp -> exp AS exp .)
    LESS_EQUAL      reduce using rule 45 (exp -> exp AS exp .)
    LESSTHAN        reduce using rule 45 (exp -> exp AS exp .)
    AS              reduce using rule 45 (exp -> exp AS exp .)
    IS              reduce using rule 45 (exp -> exp AS exp .)
    IS_EXCLAMATION  reduce using rule 45 (exp -> exp AS exp .)
    EQUAL           reduce using rule 45 (exp -> exp AS exp .)
    EXCLAMATION_EQUAL reduce using rule 45 (exp -> exp AS exp .)
    AND             reduce using rule 45 (exp -> exp AS exp .)
    OR              reduce using rule 45 (exp -> exp AS exp .)
    IF_NULL         reduce using rule 45 (exp -> exp AS exp .)
    INTERROGATION   reduce using rule 45 (exp -> exp AS exp .)
    MULTIPLICATION_EQUAL reduce using rule 45 (exp -> exp AS exp .)
    DIVIDE_EQUAL    reduce using rule 45 (exp -> exp AS exp .)
    SOMA_EQUAL      reduce using rule 45 (exp -> exp AS exp .)
    SUB_EQUAL       reduce using rule 45 (exp -> exp AS exp .)
    RPAREN          reduce using rule 45 (exp -> exp AS exp .)
    VIRGULA         reduce using rule 45 (exp -> exp AS exp .)
    COLON           reduce using rule 45 (exp -> exp AS exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! LESS            [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! REST            [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! MULTIPLICATION  [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! DIVIDE          [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! MORE_MORE       [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! LESS_LESS       [ reduce using rule 45 (exp -> exp AS exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 95

    (46) exp -> exp IS exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 46 (exp -> exp IS exp .)
    MORE_EQUAL      reduce using rule 46 (exp -> exp IS exp .)
    MORETHAN        reduce using rule 46 (exp -> exp IS exp .)
    LESS_EQUAL      reduce using rule 46 (exp -> exp IS exp .)
    LESSTHAN        reduce using rule 46 (exp -> exp IS exp .)
    AS              reduce using rule 46 (exp -> exp IS exp .)
    IS              reduce using rule 46 (exp -> exp IS exp .)
    IS_EXCLAMATION  reduce using rule 46 (exp -> exp IS exp .)
    EQUAL           reduce using rule 46 (exp -> exp IS exp .)
    EXCLAMATION_EQUAL reduce using rule 46 (exp -> exp IS exp .)
    AND             reduce using rule 46 (exp -> exp IS exp .)
    OR              reduce using rule 46 (exp -> exp IS exp .)
    IF_NULL         reduce using rule 46 (exp -> exp IS exp .)
    INTERROGATION   reduce using rule 46 (exp -> exp IS exp .)
    MULTIPLICATION_EQUAL reduce using rule 46 (exp -> exp IS exp .)
    DIVIDE_EQUAL    reduce using rule 46 (exp -> exp IS exp .)
    SOMA_EQUAL      reduce using rule 46 (exp -> exp IS exp .)
    SUB_EQUAL       reduce using rule 46 (exp -> exp IS exp .)
    RPAREN          reduce using rule 46 (exp -> exp IS exp .)
    VIRGULA         reduce using rule 46 (exp -> exp IS exp .)
    COLON           reduce using rule 46 (exp -> exp IS exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! LESS            [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! REST            [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! MULTIPLICATION  [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! DIVIDE          [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! MORE_MORE       [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! LESS_LESS       [ reduce using rule 46 (exp -> exp IS exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 96

    (47) exp -> exp IS_EXCLAMATION exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    MORE_EQUAL      reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    MORETHAN        reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    LESS_EQUAL      reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    LESSTHAN        reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    AS              reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    IS              reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    IS_EXCLAMATION  reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    EQUAL           reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    EXCLAMATION_EQUAL reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    AND             reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    OR              reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    IF_NULL         reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    INTERROGATION   reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    MULTIPLICATION_EQUAL reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    DIVIDE_EQUAL    reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    SOMA_EQUAL      reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    SUB_EQUAL       reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    RPAREN          reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    VIRGULA         reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    COLON           reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! LESS            [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! REST            [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! MULTIPLICATION  [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! MORE_MORE       [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! LESS_LESS       [ reduce using rule 47 (exp -> exp IS_EXCLAMATION exp .) ]
  ! MORE_EQUAL      [ shift and go to state 50 ]
  ! MORETHAN        [ shift and go to state 51 ]
  ! LESS_EQUAL      [ shift and go to state 52 ]
  ! LESSTHAN        [ shift and go to state 53 ]
  ! AS              [ shift and go to state 54 ]
  ! IS              [ shift and go to state 55 ]
  ! IS_EXCLAMATION  [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 97

    (48) exp -> exp EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 48 (exp -> exp EQUAL exp .)
    EQUAL           reduce using rule 48 (exp -> exp EQUAL exp .)
    EXCLAMATION_EQUAL reduce using rule 48 (exp -> exp EQUAL exp .)
    AND             reduce using rule 48 (exp -> exp EQUAL exp .)
    OR              reduce using rule 48 (exp -> exp EQUAL exp .)
    IF_NULL         reduce using rule 48 (exp -> exp EQUAL exp .)
    INTERROGATION   reduce using rule 48 (exp -> exp EQUAL exp .)
    MULTIPLICATION_EQUAL reduce using rule 48 (exp -> exp EQUAL exp .)
    DIVIDE_EQUAL    reduce using rule 48 (exp -> exp EQUAL exp .)
    SOMA_EQUAL      reduce using rule 48 (exp -> exp EQUAL exp .)
    SUB_EQUAL       reduce using rule 48 (exp -> exp EQUAL exp .)
    RPAREN          reduce using rule 48 (exp -> exp EQUAL exp .)
    VIRGULA         reduce using rule 48 (exp -> exp EQUAL exp .)
    COLON           reduce using rule 48 (exp -> exp EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! LESS            [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! REST            [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! AS              [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! IS              [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 48 (exp -> exp EQUAL exp .) ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 98

    (49) exp -> exp EXCLAMATION_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    EQUAL           reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    EXCLAMATION_EQUAL reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    AND             reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    OR              reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    IF_NULL         reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    INTERROGATION   reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    MULTIPLICATION_EQUAL reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    DIVIDE_EQUAL    reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    SOMA_EQUAL      reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    SUB_EQUAL       reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    RPAREN          reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    VIRGULA         reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    COLON           reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! LESS            [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! REST            [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! AS              [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! IS              [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 49 (exp -> exp EXCLAMATION_EQUAL exp .) ]
  ! EQUAL           [ shift and go to state 57 ]
  ! EXCLAMATION_EQUAL [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 99

    (50) exp -> exp AND exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 50 (exp -> exp AND exp .)
    AND             reduce using rule 50 (exp -> exp AND exp .)
    OR              reduce using rule 50 (exp -> exp AND exp .)
    IF_NULL         reduce using rule 50 (exp -> exp AND exp .)
    INTERROGATION   reduce using rule 50 (exp -> exp AND exp .)
    MULTIPLICATION_EQUAL reduce using rule 50 (exp -> exp AND exp .)
    DIVIDE_EQUAL    reduce using rule 50 (exp -> exp AND exp .)
    SOMA_EQUAL      reduce using rule 50 (exp -> exp AND exp .)
    SUB_EQUAL       reduce using rule 50 (exp -> exp AND exp .)
    RPAREN          reduce using rule 50 (exp -> exp AND exp .)
    VIRGULA         reduce using rule 50 (exp -> exp AND exp .)
    COLON           reduce using rule 50 (exp -> exp AND exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! REST            [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! MULTIPLICATION  [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! MORE_EQUAL      [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! MORETHAN        [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! AS              [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! IS              [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! EQUAL           [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! MORE_MORE       [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! LESS_LESS       [ reduce using rule 50 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 100

    (51) exp -> exp OR exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 51 (exp -> exp OR exp .)
    AND             reduce using rule 51 (exp -> exp OR exp .)
    OR              reduce using rule 51 (exp -> exp OR exp .)
    IF_NULL         reduce using rule 51 (exp -> exp OR exp .)
    INTERROGATION   reduce using rule 51 (exp -> exp OR exp .)
    MULTIPLICATION_EQUAL reduce using rule 51 (exp -> exp OR exp .)
    DIVIDE_EQUAL    reduce using rule 51 (exp -> exp OR exp .)
    SOMA_EQUAL      reduce using rule 51 (exp -> exp OR exp .)
    SUB_EQUAL       reduce using rule 51 (exp -> exp OR exp .)
    RPAREN          reduce using rule 51 (exp -> exp OR exp .)
    VIRGULA         reduce using rule 51 (exp -> exp OR exp .)
    COLON           reduce using rule 51 (exp -> exp OR exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! REST            [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! MULTIPLICATION  [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! MORE_EQUAL      [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! MORETHAN        [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! AS              [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! IS              [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! EQUAL           [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! MORE_MORE       [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! LESS_LESS       [ reduce using rule 51 (exp -> exp OR exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 101

    (52) exp -> exp IF_NULL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 52 (exp -> exp IF_NULL exp .)
    AND             reduce using rule 52 (exp -> exp IF_NULL exp .)
    OR              reduce using rule 52 (exp -> exp IF_NULL exp .)
    IF_NULL         reduce using rule 52 (exp -> exp IF_NULL exp .)
    INTERROGATION   reduce using rule 52 (exp -> exp IF_NULL exp .)
    MULTIPLICATION_EQUAL reduce using rule 52 (exp -> exp IF_NULL exp .)
    DIVIDE_EQUAL    reduce using rule 52 (exp -> exp IF_NULL exp .)
    SOMA_EQUAL      reduce using rule 52 (exp -> exp IF_NULL exp .)
    SUB_EQUAL       reduce using rule 52 (exp -> exp IF_NULL exp .)
    RPAREN          reduce using rule 52 (exp -> exp IF_NULL exp .)
    VIRGULA         reduce using rule 52 (exp -> exp IF_NULL exp .)
    COLON           reduce using rule 52 (exp -> exp IF_NULL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! LESS            [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! REST            [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! DIVIDE          [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! MORETHAN        [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! LESSTHAN        [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! AS              [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! IS              [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! EQUAL           [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! MORE_MORE       [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! LESS_LESS       [ reduce using rule 52 (exp -> exp IF_NULL exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! IF_NULL         [ shift and go to state 61 ]
  ! INTERROGATION   [ shift and go to state 62 ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 102

    (53) exp -> exp INTERROGATION exp . COLON exp
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    COLON           shift and go to state 120
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 103

    (54) exp -> exp MULTIPLICATION_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .)
    RPAREN          reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .)
    VIRGULA         reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .)
    COLON           reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! LESS            [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! REST            [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! AS              [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! IS              [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! EQUAL           [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! AND             [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! OR              [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! IF_NULL         [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! INTERROGATION   [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! MULTIPLICATION_EQUAL [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! DIVIDE_EQUAL    [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! SOMA_EQUAL      [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! SUB_EQUAL       [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 54 (exp -> exp MULTIPLICATION_EQUAL exp .) ]


state 104

    (55) exp -> exp DIVIDE_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .)
    RPAREN          reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .)
    VIRGULA         reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .)
    COLON           reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! LESS            [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! REST            [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! AS              [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! IS              [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! EQUAL           [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! AND             [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! OR              [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! IF_NULL         [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! INTERROGATION   [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! MULTIPLICATION_EQUAL [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! DIVIDE_EQUAL    [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! SOMA_EQUAL      [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! SUB_EQUAL       [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 55 (exp -> exp DIVIDE_EQUAL exp .) ]


state 105

    (56) exp -> exp SOMA_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 56 (exp -> exp SOMA_EQUAL exp .)
    RPAREN          reduce using rule 56 (exp -> exp SOMA_EQUAL exp .)
    VIRGULA         reduce using rule 56 (exp -> exp SOMA_EQUAL exp .)
    COLON           reduce using rule 56 (exp -> exp SOMA_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! LESS            [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! REST            [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! AS              [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! IS              [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! EQUAL           [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! AND             [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! OR              [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! IF_NULL         [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! INTERROGATION   [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! MULTIPLICATION_EQUAL [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! DIVIDE_EQUAL    [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! SOMA_EQUAL      [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! SUB_EQUAL       [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 56 (exp -> exp SOMA_EQUAL exp .) ]


state 106

    (57) exp -> exp SUB_EQUAL exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 57 (exp -> exp SUB_EQUAL exp .)
    RPAREN          reduce using rule 57 (exp -> exp SUB_EQUAL exp .)
    VIRGULA         reduce using rule 57 (exp -> exp SUB_EQUAL exp .)
    COLON           reduce using rule 57 (exp -> exp SUB_EQUAL exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! LESS            [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! REST            [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! MULTIPLICATION  [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! MORE_EQUAL      [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! MORETHAN        [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! LESS_EQUAL      [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! AS              [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! IS              [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! EQUAL           [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! AND             [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! OR              [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! IF_NULL         [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! INTERROGATION   [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! MULTIPLICATION_EQUAL [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! DIVIDE_EQUAL    [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! SOMA_EQUAL      [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! SUB_EQUAL       [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! MORE_MORE       [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]
  ! LESS_LESS       [ reduce using rule 57 (exp -> exp SUB_EQUAL exp .) ]


state 107

    (21) stm -> WHILE LPAREN exp . RPAREN body
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    RPAREN          shift and go to state 121
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 108

    (60) exp -> LPAREN exp RPAREN .

    SEMI_COLON      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MORE            reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESS            reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    REST            reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MORE_EQUAL      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MORETHAN        reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    AS              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    IS              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    IS_EXCLAMATION  reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    EXCLAMATION_EQUAL reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    IF_NULL         reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    INTERROGATION   reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION_EQUAL reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    DIVIDE_EQUAL    reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    SOMA_EQUAL      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    SUB_EQUAL       reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MORE_MORE       reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESS_LESS       reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    VIRGULA         reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 60 (exp -> LPAREN exp RPAREN .)


state 109

    (22) stm -> RETURN exp SEMI_COLON .

    WHILE           reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    RETURN          reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    IF              reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    FOR             reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    LPAREN          reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    AWAIT           reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    DOT_DOT         reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    INTERROGATION   reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    ID              reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    NUM_INT         reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    NUM_DOUBLE      reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    STR_STRING      reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    BOO_BOOLEAN     reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    TIPO_DOUBLE     reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    TIPO_INT        reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    TIPO_STRING     reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    TIPO_BOOLEAN    reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    TIPO_VOID       reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)
    RCHAV           reduce using rule 22 (stm -> RETURN exp SEMI_COLON .)


state 110

    (23) stm -> IF LPAREN exp . RPAREN bodyorstm
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    RPAREN          shift and go to state 122
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 111

    (24) stm -> FOR LPAREN tiposassign . SEMI_COLON midfor SEMI_COLON midfor RPAREN body

    SEMI_COLON      shift and go to state 123


state 112

    (25) stm -> FOR LPAREN tipo . ID IN ID RPAREN body
    (27) tiposassign -> tipo . assign
    (28) tiposassign -> tipo . assign VIRGULA tipoassigns
    (73) assign -> . ID RECEIVE_VALUE exp

    ID              shift and go to state 124

    assign                         shift and go to state 125

state 113

    (65) exp -> ID RECEIVE_VALUE exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .)
    RPAREN          reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .)
    VIRGULA         reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .)
    COLON           reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! LESS            [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! REST            [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! MULTIPLICATION  [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! DIVIDE          [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! MORE_EQUAL      [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! MORETHAN        [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! LESSTHAN        [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! AS              [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! IS              [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! EQUAL           [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! AND             [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! OR              [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! IF_NULL         [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! INTERROGATION   [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! MULTIPLICATION_EQUAL [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! DIVIDE_EQUAL    [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! SOMA_EQUAL      [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! SUB_EQUAL       [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! MORE_MORE       [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]
  ! LESS_LESS       [ reduce using rule 65 (exp -> ID RECEIVE_VALUE exp .) ]


state 114

    (34) call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 126


state 115

    (35) call -> ID LPAREN RPAREN .

    SEMI_COLON      reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MORE            reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 35 (call -> ID LPAREN RPAREN .)
    REST            reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MULTIPLICATION  reduce using rule 35 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MORE_EQUAL      reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MORETHAN        reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LESSTHAN        reduce using rule 35 (call -> ID LPAREN RPAREN .)
    AS              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    IS              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    IS_EXCLAMATION  reduce using rule 35 (call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 35 (call -> ID LPAREN RPAREN .)
    EXCLAMATION_EQUAL reduce using rule 35 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    IF_NULL         reduce using rule 35 (call -> ID LPAREN RPAREN .)
    INTERROGATION   reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MULTIPLICATION_EQUAL reduce using rule 35 (call -> ID LPAREN RPAREN .)
    DIVIDE_EQUAL    reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SOMA_EQUAL      reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SUB_EQUAL       reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MORE_MORE       reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LESS_LESS       reduce using rule 35 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 35 (call -> ID LPAREN RPAREN .)
    VIRGULA         reduce using rule 35 (call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 35 (call -> ID LPAREN RPAREN .)


state 116

    (71) params -> exp . VIRGULA params
    (72) params -> exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    VIRGULA         shift and go to state 127
    RPAREN          reduce using rule 72 (params -> exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 117

    (63) exp -> INTERROGATION DOT_DOT exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    MULTIPLICATION_EQUAL reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    DIVIDE_EQUAL    reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    SOMA_EQUAL      reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    SUB_EQUAL       reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    RPAREN          reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    VIRGULA         reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    COLON           reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! LESS            [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! REST            [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! MULTIPLICATION  [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! DIVIDE          [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! MORE_EQUAL      [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! MORETHAN        [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! LESS_EQUAL      [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! LESSTHAN        [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! AS              [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! IS              [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! EQUAL           [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! AND             [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! OR              [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! IF_NULL         [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! INTERROGATION   [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! MORE_MORE       [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! LESS_LESS       [ reduce using rule 63 (exp -> INTERROGATION DOT_DOT exp .) ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 118

    (10) sigParams -> tipo ID .
    (11) sigParams -> tipo ID . VIRGULA sigParams

    RPAREN          reduce using rule 10 (sigParams -> tipo ID .)
    VIRGULA         shift and go to state 128


state 119

    (8) signature -> tipo ID LPAREN sigParams RPAREN .

    LCHAV           reduce using rule 8 (signature -> tipo ID LPAREN sigParams RPAREN .)


state 120

    (53) exp -> exp INTERROGATION exp COLON . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 129
    call                           shift and go to state 33

state 121

    (21) stm -> WHILE LPAREN exp RPAREN . body
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 14

    body                           shift and go to state 130

state 122

    (23) stm -> IF LPAREN exp RPAREN . bodyorstm
    (14) bodyorstm -> . stm
    (15) bodyorstm -> . body
    (16) bodyorstm -> . body ELSE stm
    (17) bodyorstm -> . body ELSE body
    (20) stm -> . exp SEMI_COLON
    (21) stm -> . WHILE LPAREN exp RPAREN body
    (22) stm -> . RETURN exp SEMI_COLON
    (23) stm -> . IF LPAREN exp RPAREN bodyorstm
    (24) stm -> . FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> . FOR LPAREN tipo ID IN ID RPAREN body
    (26) stm -> . declvar
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    WHILE           shift and go to state 22
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    LCHAV           shift and go to state 14
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    exp                            shift and go to state 21
    bodyorstm                      shift and go to state 131
    stm                            shift and go to state 132
    body                           shift and go to state 133
    tipo                           shift and go to state 27
    declvar                        shift and go to state 29
    call                           shift and go to state 33

state 123

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON . midfor SEMI_COLON midfor RPAREN body
    (32) midfor -> . exp
    (33) midfor -> .
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    SEMI_COLON      reduce using rule 33 (midfor -> .)
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    midfor                         shift and go to state 134
    exp                            shift and go to state 135
    call                           shift and go to state 33

state 124

    (25) stm -> FOR LPAREN tipo ID . IN ID RPAREN body
    (73) assign -> ID . RECEIVE_VALUE exp

    IN              shift and go to state 136
    RECEIVE_VALUE   shift and go to state 41


state 125

    (27) tiposassign -> tipo assign .
    (28) tiposassign -> tipo assign . VIRGULA tipoassigns

    SEMI_COLON      reduce using rule 27 (tiposassign -> tipo assign .)
    VIRGULA         shift and go to state 137


state 126

    (34) call -> ID LPAREN params RPAREN .

    SEMI_COLON      reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MORE            reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    LESS            reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    REST            reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MULTIPLICATION  reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    DIVIDE          reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MORE_EQUAL      reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MORETHAN        reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    LESS_EQUAL      reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    LESSTHAN        reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    AS              reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    IS              reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    IS_EXCLAMATION  reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    EQUAL           reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    EXCLAMATION_EQUAL reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    AND             reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    OR              reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    IF_NULL         reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    INTERROGATION   reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MULTIPLICATION_EQUAL reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    DIVIDE_EQUAL    reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    SOMA_EQUAL      reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    SUB_EQUAL       reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    MORE_MORE       reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    LESS_LESS       reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    VIRGULA         reduce using rule 34 (call -> ID LPAREN params RPAREN .)
    COLON           reduce using rule 34 (call -> ID LPAREN params RPAREN .)


state 127

    (71) params -> exp VIRGULA . params
    (71) params -> . exp VIRGULA params
    (72) params -> . exp
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    exp                            shift and go to state 116
    params                         shift and go to state 138
    call                           shift and go to state 33

state 128

    (11) sigParams -> tipo ID VIRGULA . sigParams
    (10) sigParams -> . tipo ID
    (11) sigParams -> . tipo ID VIRGULA sigParams
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    tipo                           shift and go to state 81
    sigParams                      shift and go to state 139

state 129

    (53) exp -> exp INTERROGATION exp COLON exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    MULTIPLICATION_EQUAL reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    DIVIDE_EQUAL    reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    SOMA_EQUAL      reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    SUB_EQUAL       reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    RPAREN          reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    VIRGULA         reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    COLON           reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68

  ! MORE            [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! LESS            [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! REST            [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! MULTIPLICATION  [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! DIVIDE          [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! MORE_EQUAL      [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! MORETHAN        [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! LESSTHAN        [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! AS              [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! IS              [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! IS_EXCLAMATION  [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! EQUAL           [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! EXCLAMATION_EQUAL [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! AND             [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! OR              [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! IF_NULL         [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! INTERROGATION   [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! MORE_MORE       [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! LESS_LESS       [ reduce using rule 53 (exp -> exp INTERROGATION exp COLON exp .) ]
  ! MULTIPLICATION_EQUAL [ shift and go to state 63 ]
  ! DIVIDE_EQUAL    [ shift and go to state 64 ]
  ! SOMA_EQUAL      [ shift and go to state 65 ]
  ! SUB_EQUAL       [ shift and go to state 66 ]


state 130

    (21) stm -> WHILE LPAREN exp RPAREN body .

    WHILE           reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    RETURN          reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    IF              reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    FOR             reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    LPAREN          reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    AWAIT           reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    DOT_DOT         reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    INTERROGATION   reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    ID              reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    NUM_INT         reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    NUM_DOUBLE      reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    STR_STRING      reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    BOO_BOOLEAN     reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    TIPO_DOUBLE     reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    TIPO_INT        reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    TIPO_STRING     reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    TIPO_BOOLEAN    reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    TIPO_VOID       reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)
    RCHAV           reduce using rule 21 (stm -> WHILE LPAREN exp RPAREN body .)


state 131

    (23) stm -> IF LPAREN exp RPAREN bodyorstm .

    WHILE           reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    RETURN          reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    IF              reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    FOR             reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    LPAREN          reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    AWAIT           reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    DOT_DOT         reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    INTERROGATION   reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    ID              reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    NUM_INT         reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    NUM_DOUBLE      reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    STR_STRING      reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    BOO_BOOLEAN     reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    TIPO_DOUBLE     reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    TIPO_INT        reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    TIPO_STRING     reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    TIPO_BOOLEAN    reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    TIPO_VOID       reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)
    RCHAV           reduce using rule 23 (stm -> IF LPAREN exp RPAREN bodyorstm .)


state 132

    (14) bodyorstm -> stm .

    WHILE           reduce using rule 14 (bodyorstm -> stm .)
    RETURN          reduce using rule 14 (bodyorstm -> stm .)
    IF              reduce using rule 14 (bodyorstm -> stm .)
    FOR             reduce using rule 14 (bodyorstm -> stm .)
    LPAREN          reduce using rule 14 (bodyorstm -> stm .)
    AWAIT           reduce using rule 14 (bodyorstm -> stm .)
    DOT_DOT         reduce using rule 14 (bodyorstm -> stm .)
    INTERROGATION   reduce using rule 14 (bodyorstm -> stm .)
    ID              reduce using rule 14 (bodyorstm -> stm .)
    NUM_INT         reduce using rule 14 (bodyorstm -> stm .)
    NUM_DOUBLE      reduce using rule 14 (bodyorstm -> stm .)
    STR_STRING      reduce using rule 14 (bodyorstm -> stm .)
    BOO_BOOLEAN     reduce using rule 14 (bodyorstm -> stm .)
    TIPO_DOUBLE     reduce using rule 14 (bodyorstm -> stm .)
    TIPO_INT        reduce using rule 14 (bodyorstm -> stm .)
    TIPO_STRING     reduce using rule 14 (bodyorstm -> stm .)
    TIPO_BOOLEAN    reduce using rule 14 (bodyorstm -> stm .)
    TIPO_VOID       reduce using rule 14 (bodyorstm -> stm .)
    RCHAV           reduce using rule 14 (bodyorstm -> stm .)


state 133

    (15) bodyorstm -> body .
    (16) bodyorstm -> body . ELSE stm
    (17) bodyorstm -> body . ELSE body

    WHILE           reduce using rule 15 (bodyorstm -> body .)
    RETURN          reduce using rule 15 (bodyorstm -> body .)
    IF              reduce using rule 15 (bodyorstm -> body .)
    FOR             reduce using rule 15 (bodyorstm -> body .)
    LPAREN          reduce using rule 15 (bodyorstm -> body .)
    AWAIT           reduce using rule 15 (bodyorstm -> body .)
    DOT_DOT         reduce using rule 15 (bodyorstm -> body .)
    INTERROGATION   reduce using rule 15 (bodyorstm -> body .)
    ID              reduce using rule 15 (bodyorstm -> body .)
    NUM_INT         reduce using rule 15 (bodyorstm -> body .)
    NUM_DOUBLE      reduce using rule 15 (bodyorstm -> body .)
    STR_STRING      reduce using rule 15 (bodyorstm -> body .)
    BOO_BOOLEAN     reduce using rule 15 (bodyorstm -> body .)
    TIPO_DOUBLE     reduce using rule 15 (bodyorstm -> body .)
    TIPO_INT        reduce using rule 15 (bodyorstm -> body .)
    TIPO_STRING     reduce using rule 15 (bodyorstm -> body .)
    TIPO_BOOLEAN    reduce using rule 15 (bodyorstm -> body .)
    TIPO_VOID       reduce using rule 15 (bodyorstm -> body .)
    RCHAV           reduce using rule 15 (bodyorstm -> body .)
    ELSE            shift and go to state 140


state 134

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON midfor . SEMI_COLON midfor RPAREN body

    SEMI_COLON      shift and go to state 141


state 135

    (32) midfor -> exp .
    (36) exp -> exp . MORE exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . REST exp
    (39) exp -> exp . MULTIPLICATION exp
    (40) exp -> exp . DIVIDE exp
    (41) exp -> exp . MORE_EQUAL exp
    (42) exp -> exp . MORETHAN exp
    (43) exp -> exp . LESS_EQUAL exp
    (44) exp -> exp . LESSTHAN exp
    (45) exp -> exp . AS exp
    (46) exp -> exp . IS exp
    (47) exp -> exp . IS_EXCLAMATION exp
    (48) exp -> exp . EQUAL exp
    (49) exp -> exp . EXCLAMATION_EQUAL exp
    (50) exp -> exp . AND exp
    (51) exp -> exp . OR exp
    (52) exp -> exp . IF_NULL exp
    (53) exp -> exp . INTERROGATION exp COLON exp
    (54) exp -> exp . MULTIPLICATION_EQUAL exp
    (55) exp -> exp . DIVIDE_EQUAL exp
    (56) exp -> exp . SOMA_EQUAL exp
    (57) exp -> exp . SUB_EQUAL exp
    (58) exp -> exp . MORE_MORE
    (59) exp -> exp . LESS_LESS

    SEMI_COLON      reduce using rule 32 (midfor -> exp .)
    RPAREN          reduce using rule 32 (midfor -> exp .)
    MORE            shift and go to state 45
    LESS            shift and go to state 46
    REST            shift and go to state 47
    MULTIPLICATION  shift and go to state 48
    DIVIDE          shift and go to state 49
    MORE_EQUAL      shift and go to state 50
    MORETHAN        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESSTHAN        shift and go to state 53
    AS              shift and go to state 54
    IS              shift and go to state 55
    IS_EXCLAMATION  shift and go to state 56
    EQUAL           shift and go to state 57
    EXCLAMATION_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    IF_NULL         shift and go to state 61
    INTERROGATION   shift and go to state 62
    MULTIPLICATION_EQUAL shift and go to state 63
    DIVIDE_EQUAL    shift and go to state 64
    SOMA_EQUAL      shift and go to state 65
    SUB_EQUAL       shift and go to state 66
    MORE_MORE       shift and go to state 67
    LESS_LESS       shift and go to state 68


state 136

    (25) stm -> FOR LPAREN tipo ID IN . ID RPAREN body

    ID              shift and go to state 142


state 137

    (28) tiposassign -> tipo assign VIRGULA . tipoassigns
    (30) tipoassigns -> . assign
    (31) tipoassigns -> . assign VIRGULA tipoassigns
    (73) assign -> . ID RECEIVE_VALUE exp

    ID              shift and go to state 74

    assign                         shift and go to state 143
    tipoassigns                    shift and go to state 144

state 138

    (71) params -> exp VIRGULA params .

    RPAREN          reduce using rule 71 (params -> exp VIRGULA params .)


state 139

    (11) sigParams -> tipo ID VIRGULA sigParams .

    RPAREN          reduce using rule 11 (sigParams -> tipo ID VIRGULA sigParams .)


state 140

    (16) bodyorstm -> body ELSE . stm
    (17) bodyorstm -> body ELSE . body
    (20) stm -> . exp SEMI_COLON
    (21) stm -> . WHILE LPAREN exp RPAREN body
    (22) stm -> . RETURN exp SEMI_COLON
    (23) stm -> . IF LPAREN exp RPAREN bodyorstm
    (24) stm -> . FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body
    (25) stm -> . FOR LPAREN tipo ID IN ID RPAREN body
    (26) stm -> . declvar
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (5) declvar -> . tipo assign SEMI_COLON
    (6) declvar -> . tipo INTERROGATION ID SEMI_COLON
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN
    (74) tipo -> . TIPO_DOUBLE
    (75) tipo -> . TIPO_INT
    (76) tipo -> . TIPO_STRING
    (77) tipo -> . TIPO_BOOLEAN
    (78) tipo -> . TIPO_VOID

    WHILE           shift and go to state 22
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    LCHAV           shift and go to state 14
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37
    TIPO_DOUBLE     shift and go to state 6
    TIPO_INT        shift and go to state 7
    TIPO_STRING     shift and go to state 8
    TIPO_BOOLEAN    shift and go to state 9
    TIPO_VOID       shift and go to state 10

    body                           shift and go to state 145
    stm                            shift and go to state 146
    exp                            shift and go to state 21
    tipo                           shift and go to state 27
    declvar                        shift and go to state 29
    call                           shift and go to state 33

state 141

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON . midfor RPAREN body
    (32) midfor -> . exp
    (33) midfor -> .
    (36) exp -> . exp MORE exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp REST exp
    (39) exp -> . exp MULTIPLICATION exp
    (40) exp -> . exp DIVIDE exp
    (41) exp -> . exp MORE_EQUAL exp
    (42) exp -> . exp MORETHAN exp
    (43) exp -> . exp LESS_EQUAL exp
    (44) exp -> . exp LESSTHAN exp
    (45) exp -> . exp AS exp
    (46) exp -> . exp IS exp
    (47) exp -> . exp IS_EXCLAMATION exp
    (48) exp -> . exp EQUAL exp
    (49) exp -> . exp EXCLAMATION_EQUAL exp
    (50) exp -> . exp AND exp
    (51) exp -> . exp OR exp
    (52) exp -> . exp IF_NULL exp
    (53) exp -> . exp INTERROGATION exp COLON exp
    (54) exp -> . exp MULTIPLICATION_EQUAL exp
    (55) exp -> . exp DIVIDE_EQUAL exp
    (56) exp -> . exp SOMA_EQUAL exp
    (57) exp -> . exp SUB_EQUAL exp
    (58) exp -> . exp MORE_MORE
    (59) exp -> . exp LESS_LESS
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . AWAIT exp
    (62) exp -> . DOT_DOT exp
    (63) exp -> . INTERROGATION DOT_DOT exp
    (64) exp -> . call
    (65) exp -> . ID RECEIVE_VALUE exp
    (66) exp -> . ID
    (67) exp -> . NUM_INT
    (68) exp -> . NUM_DOUBLE
    (69) exp -> . STR_STRING
    (70) exp -> . BOO_BOOLEAN
    (34) call -> . ID LPAREN params RPAREN
    (35) call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 33 (midfor -> .)
    LPAREN          shift and go to state 23
    AWAIT           shift and go to state 31
    DOT_DOT         shift and go to state 32
    INTERROGATION   shift and go to state 30
    ID              shift and go to state 28
    NUM_INT         shift and go to state 34
    NUM_DOUBLE      shift and go to state 35
    STR_STRING      shift and go to state 36
    BOO_BOOLEAN     shift and go to state 37

    midfor                         shift and go to state 147
    exp                            shift and go to state 135
    call                           shift and go to state 33

state 142

    (25) stm -> FOR LPAREN tipo ID IN ID . RPAREN body

    RPAREN          shift and go to state 148


state 143

    (30) tipoassigns -> assign .
    (31) tipoassigns -> assign . VIRGULA tipoassigns

    SEMI_COLON      reduce using rule 30 (tipoassigns -> assign .)
    VIRGULA         shift and go to state 149


state 144

    (28) tiposassign -> tipo assign VIRGULA tipoassigns .

    SEMI_COLON      reduce using rule 28 (tiposassign -> tipo assign VIRGULA tipoassigns .)


state 145

    (17) bodyorstm -> body ELSE body .

    WHILE           reduce using rule 17 (bodyorstm -> body ELSE body .)
    RETURN          reduce using rule 17 (bodyorstm -> body ELSE body .)
    IF              reduce using rule 17 (bodyorstm -> body ELSE body .)
    FOR             reduce using rule 17 (bodyorstm -> body ELSE body .)
    LPAREN          reduce using rule 17 (bodyorstm -> body ELSE body .)
    AWAIT           reduce using rule 17 (bodyorstm -> body ELSE body .)
    DOT_DOT         reduce using rule 17 (bodyorstm -> body ELSE body .)
    INTERROGATION   reduce using rule 17 (bodyorstm -> body ELSE body .)
    ID              reduce using rule 17 (bodyorstm -> body ELSE body .)
    NUM_INT         reduce using rule 17 (bodyorstm -> body ELSE body .)
    NUM_DOUBLE      reduce using rule 17 (bodyorstm -> body ELSE body .)
    STR_STRING      reduce using rule 17 (bodyorstm -> body ELSE body .)
    BOO_BOOLEAN     reduce using rule 17 (bodyorstm -> body ELSE body .)
    TIPO_DOUBLE     reduce using rule 17 (bodyorstm -> body ELSE body .)
    TIPO_INT        reduce using rule 17 (bodyorstm -> body ELSE body .)
    TIPO_STRING     reduce using rule 17 (bodyorstm -> body ELSE body .)
    TIPO_BOOLEAN    reduce using rule 17 (bodyorstm -> body ELSE body .)
    TIPO_VOID       reduce using rule 17 (bodyorstm -> body ELSE body .)
    RCHAV           reduce using rule 17 (bodyorstm -> body ELSE body .)


state 146

    (16) bodyorstm -> body ELSE stm .

    WHILE           reduce using rule 16 (bodyorstm -> body ELSE stm .)
    RETURN          reduce using rule 16 (bodyorstm -> body ELSE stm .)
    IF              reduce using rule 16 (bodyorstm -> body ELSE stm .)
    FOR             reduce using rule 16 (bodyorstm -> body ELSE stm .)
    LPAREN          reduce using rule 16 (bodyorstm -> body ELSE stm .)
    AWAIT           reduce using rule 16 (bodyorstm -> body ELSE stm .)
    DOT_DOT         reduce using rule 16 (bodyorstm -> body ELSE stm .)
    INTERROGATION   reduce using rule 16 (bodyorstm -> body ELSE stm .)
    ID              reduce using rule 16 (bodyorstm -> body ELSE stm .)
    NUM_INT         reduce using rule 16 (bodyorstm -> body ELSE stm .)
    NUM_DOUBLE      reduce using rule 16 (bodyorstm -> body ELSE stm .)
    STR_STRING      reduce using rule 16 (bodyorstm -> body ELSE stm .)
    BOO_BOOLEAN     reduce using rule 16 (bodyorstm -> body ELSE stm .)
    TIPO_DOUBLE     reduce using rule 16 (bodyorstm -> body ELSE stm .)
    TIPO_INT        reduce using rule 16 (bodyorstm -> body ELSE stm .)
    TIPO_STRING     reduce using rule 16 (bodyorstm -> body ELSE stm .)
    TIPO_BOOLEAN    reduce using rule 16 (bodyorstm -> body ELSE stm .)
    TIPO_VOID       reduce using rule 16 (bodyorstm -> body ELSE stm .)
    RCHAV           reduce using rule 16 (bodyorstm -> body ELSE stm .)


state 147

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor . RPAREN body

    RPAREN          shift and go to state 150


state 148

    (25) stm -> FOR LPAREN tipo ID IN ID RPAREN . body
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 14

    body                           shift and go to state 151

state 149

    (31) tipoassigns -> assign VIRGULA . tipoassigns
    (30) tipoassigns -> . assign
    (31) tipoassigns -> . assign VIRGULA tipoassigns
    (73) assign -> . ID RECEIVE_VALUE exp

    ID              shift and go to state 74

    assign                         shift and go to state 143
    tipoassigns                    shift and go to state 152

state 150

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN . body
    (12) body -> . LCHAV stms RCHAV
    (13) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 14

    body                           shift and go to state 153

state 151

    (25) stm -> FOR LPAREN tipo ID IN ID RPAREN body .

    WHILE           reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    RETURN          reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    IF              reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    FOR             reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    LPAREN          reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    AWAIT           reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    DOT_DOT         reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    INTERROGATION   reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    ID              reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    NUM_INT         reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    NUM_DOUBLE      reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    STR_STRING      reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    BOO_BOOLEAN     reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    TIPO_DOUBLE     reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    TIPO_INT        reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    TIPO_STRING     reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    TIPO_BOOLEAN    reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    TIPO_VOID       reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)
    RCHAV           reduce using rule 25 (stm -> FOR LPAREN tipo ID IN ID RPAREN body .)


state 152

    (31) tipoassigns -> assign VIRGULA tipoassigns .

    SEMI_COLON      reduce using rule 31 (tipoassigns -> assign VIRGULA tipoassigns .)


state 153

    (24) stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .

    WHILE           reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    RETURN          reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    IF              reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    FOR             reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    LPAREN          reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    AWAIT           reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    DOT_DOT         reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    INTERROGATION   reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    ID              reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    NUM_INT         reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    NUM_DOUBLE      reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    STR_STRING      reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    BOO_BOOLEAN     reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    TIPO_DOUBLE     reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    TIPO_INT        reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    TIPO_STRING     reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    TIPO_BOOLEAN    reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    TIPO_VOID       reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)
    RCHAV           reduce using rule 24 (stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body .)

