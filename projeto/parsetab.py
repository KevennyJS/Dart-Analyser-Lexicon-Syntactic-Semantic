
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightRECEIVE_VALUEMULTIPLICATION_EQUALDIVIDE_EQUALSOMA_EQUALSUB_EQUALleftDOT_DOTrightINTERROGATIONCOLONleftORANDIF_NULLnonassocEQUALEXCLAMATION_EQUALnonassocMORE_EQUALMORETHANLESS_EQUALLESSTHANASISIS_EXCLAMATIONleftCOMMERCIAL_EleftMORELESSleftMULTIPLICATIONDIVIDERESTnonassocMORE_MORELESS_LESSEXCLAMATIONAWAITABSTRACT ALL AND AS ASSERTS ASYNC AT_SIGN AWAIT BOO_BOOLEAN BREAK CASE CATCH CLASS COLON COMMENT COMMERCIAL_E CONST CONTINUE COVARIANT DEFAULT DEFERRED DIVIDE DIVIDE_EQUAL DO DOT DOT_DOT DYNAMIC ELSE ENUM EQUAL EXCLAMATION EXCLAMATION_EQUAL EXPORT EXTENDS EXTENSION EXTERNAL FACTORY FALSE FINAL FINALLY FOR FUNCTION GET HIDE ID IF IF_NULL IMPLEMENTS IMPORTS IN INTERFACE INTERROGATION IS IS_EXCLAMATION LATE LBRACKET LCHAV LESS LESSTHAN LESS_EQUAL LESS_LESS LIBRARY LPAREN MIXIN MORE MORETHAN MORE_EQUAL MORE_MORE MULTIPLICATION MULTIPLICATION_EQUAL NEW NULL NUM_DOUBLE NUM_INT ON OPERATOR OR PART RBRACKET RCHAV RECEIVE_VALUE REQUIRED REST RETHROW RETURN RPAREN SEMI_COLON SET SHOW SOMA_EQUAL SPACE STATIC STR_STRING SUB_EQUAL SUPER SWITCH SYNC THIS THROW TIPO_BOOLEAN TIPO_DOUBLE TIPO_INT TIPO_STRING TIPO_VOID TRUE TRY TYPEDEF VAR VIRGULA WHILE WITH YIELDprogram : funcdecl\n                | funcdecl program\n                | declvar\n                | declvar program\n    declvar : tipo assign SEMI_COLON\n               | tipo INTERROGATION ID SEMI_COLON\n    funcdecl : signature bodysignature : tipo ID LPAREN sigParams RPAREN \n    | tipo ID LPAREN RPAREN sigParams : tipo ID \n                | tipo ID VIRGULA sigParams\n    body : LCHAV stms RCHAV \n            | LCHAV RCHAV \n    bodyorstm : stm \n                | body\n                | body ELSE stm\n                | body ELSE body\n    stms : stm  \n            | stm  stms\n    stm : exp SEMI_COLON \n        | WHILE LPAREN exp RPAREN body\n        | RETURN exp SEMI_COLON \n        | IF LPAREN exp RPAREN bodyorstm\n        | FOR LPAREN tiposassign SEMI_COLON midfor  SEMI_COLON midfor  RPAREN body\n        | FOR LPAREN tipo ID IN ID RPAREN body\n        | declvar\n    tiposassign : tipo  assign \n                | tipo assign VIRGULA tipoassigns\n                | \n    tipoassigns : assign\n                | assign VIRGULA tipoassigns\n    midfor : exp\n              |\n    call : ID LPAREN params RPAREN \n            | ID LPAREN RPAREN \n    exp : exp MORE expexp : exp LESS expexp : exp REST expexp : exp MULTIPLICATION expexp : exp DIVIDE expexp : exp MORE_EQUAL expexp : exp MORETHAN expexp : exp LESS_EQUAL expexp : exp LESSTHAN expexp : exp AS expexp : exp IS expexp : exp IS_EXCLAMATION expexp : exp EQUAL expexp : exp EXCLAMATION_EQUAL expexp : exp AND expexp : exp OR expexp : exp IF_NULL expexp : exp INTERROGATION exp COLON expexp : exp MULTIPLICATION_EQUAL expexp : exp DIVIDE_EQUAL expexp : exp SOMA_EQUAL expexp : exp SUB_EQUAL expexp : exp MORE_MOREexp : exp LESS_LESSexp : LPAREN exp RPARENexp : AWAIT expexp : DOT_DOT expexp : INTERROGATION DOT_DOT expexp : callexp : ID RECEIVE_VALUE expexp : IDexp : NUM_INTexp : NUM_DOUBLEexp : STR_STRINGexp : BOO_BOOLEAN\n    params : exp VIRGULA params \n            | exp\n    assign : ID RECEIVE_VALUE exptipo : TIPO_DOUBLE \n    | TIPO_INT\n    | TIPO_STRING \n    | TIPO_BOOLEAN\n    | TIPO_VOID'
    
_lr_action_items = {'TIPO_DOUBLE':([0,2,3,13,14,19,20,29,38,40,42,44,73,80,109,122,128,130,131,132,133,140,145,146,151,153,],[6,6,6,-7,6,-13,6,-26,-5,6,-12,-20,6,-6,-22,6,6,-21,-23,-14,-15,6,-17,-16,-25,-24,]),'TIPO_INT':([0,2,3,13,14,19,20,29,38,40,42,44,73,80,109,122,128,130,131,132,133,140,145,146,151,153,],[7,7,7,-7,7,-13,7,-26,-5,7,-12,-20,7,-6,-22,7,7,-21,-23,-14,-15,7,-17,-16,-25,-24,]),'TIPO_STRING':([0,2,3,13,14,19,20,29,38,40,42,44,73,80,109,122,128,130,131,132,133,140,145,146,151,153,],[8,8,8,-7,8,-13,8,-26,-5,8,-12,-20,8,-6,-22,8,8,-21,-23,-14,-15,8,-17,-16,-25,-24,]),'TIPO_BOOLEAN':([0,2,3,13,14,19,20,29,38,40,42,44,73,80,109,122,128,130,131,132,133,140,145,146,151,153,],[9,9,9,-7,9,-13,9,-26,-5,9,-12,-20,9,-6,-22,9,9,-21,-23,-14,-15,9,-17,-16,-25,-24,]),'TIPO_VOID':([0,2,3,13,14,19,20,29,38,40,42,44,73,80,109,122,128,130,131,132,133,140,145,146,151,153,],[10,10,10,-7,10,-13,10,-26,-5,10,-12,-20,10,-6,-22,10,10,-21,-23,-14,-15,10,-17,-16,-25,-24,]),'$end':([1,2,3,11,12,13,19,38,42,80,],[0,-1,-3,-2,-4,-7,-13,-5,-12,-6,]),'LCHAV':([4,83,119,121,122,140,148,150,],[14,-9,-8,14,14,14,14,14,]),'INTERROGATION':([5,6,7,8,9,10,14,19,20,21,23,24,27,28,29,31,32,33,34,35,36,37,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,115,116,117,120,122,123,126,127,129,130,131,132,133,135,140,141,145,146,151,153,],[16,-74,-75,-76,-77,-78,30,-13,30,62,30,30,16,-66,-26,30,30,-64,-67,-68,-69,-70,-5,30,-12,-20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-58,-59,30,62,62,30,30,30,30,-61,62,-6,62,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,62,62,62,62,62,62,-60,-22,62,62,-35,62,62,30,30,30,-34,30,62,-21,-23,-14,-15,62,30,30,-17,-16,-25,-24,]),'ID':([5,6,7,8,9,10,14,16,19,20,23,24,27,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,81,109,112,120,122,123,127,130,131,132,133,136,137,140,141,145,146,149,151,153,],[17,-74,-75,-76,-77,-78,28,39,-13,28,28,28,74,-26,28,28,-5,28,-12,-20,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-6,118,-22,124,28,28,28,28,-21,-23,-14,-15,142,74,28,28,-17,-16,74,-25,-24,]),'RCHAV':([14,18,19,20,29,38,42,43,44,80,109,130,131,132,133,145,146,151,153,],[19,42,-13,-18,-26,-5,-12,-19,-20,-6,-22,-21,-23,-14,-15,-17,-16,-25,-24,]),'WHILE':([14,19,20,29,38,42,44,80,109,122,130,131,132,133,140,145,146,151,153,],[22,-13,22,-26,-5,-12,-20,-6,-22,22,-21,-23,-14,-15,22,-17,-16,-25,-24,]),'RETURN':([14,19,20,29,38,42,44,80,109,122,130,131,132,133,140,145,146,151,153,],[24,-13,24,-26,-5,-12,-20,-6,-22,24,-21,-23,-14,-15,24,-17,-16,-25,-24,]),'IF':([14,19,20,29,38,42,44,80,109,122,130,131,132,133,140,145,146,151,153,],[25,-13,25,-26,-5,-12,-20,-6,-22,25,-21,-23,-14,-15,25,-17,-16,-25,-24,]),'FOR':([14,19,20,29,38,42,44,80,109,122,130,131,132,133,140,145,146,151,153,],[26,-13,26,-26,-5,-12,-20,-6,-22,26,-21,-23,-14,-15,26,-17,-16,-25,-24,]),'LPAREN':([14,17,19,20,22,23,24,25,26,28,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[23,40,-13,23,69,23,23,72,73,76,-26,23,23,-5,23,-12,-20,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-6,-22,23,23,23,23,-21,-23,-14,-15,23,23,-17,-16,-25,-24,]),'AWAIT':([14,19,20,23,24,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[31,-13,31,31,31,-26,31,31,-5,31,-12,-20,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-6,-22,31,31,31,31,-21,-23,-14,-15,31,31,-17,-16,-25,-24,]),'DOT_DOT':([14,19,20,23,24,29,30,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[32,-13,32,32,32,-26,77,32,32,-5,32,-12,-20,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-6,-22,32,32,32,32,-21,-23,-14,-15,32,32,-17,-16,-25,-24,]),'NUM_INT':([14,19,20,23,24,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[34,-13,34,34,34,-26,34,34,-5,34,-12,-20,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-6,-22,34,34,34,34,-21,-23,-14,-15,34,34,-17,-16,-25,-24,]),'NUM_DOUBLE':([14,19,20,23,24,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[35,-13,35,35,35,-26,35,35,-5,35,-12,-20,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-6,-22,35,35,35,35,-21,-23,-14,-15,35,35,-17,-16,-25,-24,]),'STR_STRING':([14,19,20,23,24,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[36,-13,36,36,36,-26,36,36,-5,36,-12,-20,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-6,-22,36,36,36,36,-21,-23,-14,-15,36,36,-17,-16,-25,-24,]),'BOO_BOOLEAN':([14,19,20,23,24,29,31,32,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,80,109,120,122,123,127,130,131,132,133,140,141,145,146,151,153,],[37,-13,37,37,37,-26,37,37,-5,37,-12,-20,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-6,-22,37,37,37,37,-21,-23,-14,-15,37,37,-17,-16,-25,-24,]),'SEMI_COLON':([15,21,28,33,34,35,36,37,39,67,68,71,73,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,108,111,113,115,117,123,125,126,129,134,135,143,144,152,],[38,44,-66,-64,-67,-68,-69,-70,80,-58,-59,109,-29,-61,-62,-73,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-56,-57,-60,123,-65,-35,-63,-33,-27,-34,-53,141,-32,-30,-28,-31,]),'RECEIVE_VALUE':([17,28,74,124,],[41,75,41,41,]),'ELSE':([19,42,133,],[-13,-12,140,]),'MORE':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[45,-66,-64,-67,-68,-69,-70,-58,-59,45,45,-61,45,45,-36,-37,-38,-39,-40,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-60,45,45,-35,45,45,-34,45,45,]),'LESS':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[46,-66,-64,-67,-68,-69,-70,-58,-59,46,46,-61,46,46,-36,-37,-38,-39,-40,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-60,46,46,-35,46,46,-34,46,46,]),'REST':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[47,-66,-64,-67,-68,-69,-70,-58,-59,47,47,-61,47,47,47,47,-38,-39,-40,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-60,47,47,-35,47,47,-34,47,47,]),'MULTIPLICATION':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[48,-66,-64,-67,-68,-69,-70,-58,-59,48,48,-61,48,48,48,48,-38,-39,-40,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-60,48,48,-35,48,48,-34,48,48,]),'DIVIDE':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[49,-66,-64,-67,-68,-69,-70,-58,-59,49,49,-61,49,49,49,49,-38,-39,-40,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-60,49,49,-35,49,49,-34,49,49,]),'MORE_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[50,-66,-64,-67,-68,-69,-70,-58,-59,50,50,-61,50,50,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,50,50,50,50,50,50,50,50,50,50,50,-60,50,50,-35,50,50,-34,50,50,]),'MORETHAN':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[51,-66,-64,-67,-68,-69,-70,-58,-59,51,51,-61,51,51,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,51,51,51,51,51,51,51,51,51,51,51,-60,51,51,-35,51,51,-34,51,51,]),'LESS_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[52,-66,-64,-67,-68,-69,-70,-58,-59,52,52,-61,52,52,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,52,52,52,52,52,52,52,52,52,52,52,-60,52,52,-35,52,52,-34,52,52,]),'LESSTHAN':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[53,-66,-64,-67,-68,-69,-70,-58,-59,53,53,-61,53,53,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,53,53,53,53,53,53,53,53,53,53,53,-60,53,53,-35,53,53,-34,53,53,]),'AS':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[54,-66,-64,-67,-68,-69,-70,-58,-59,54,54,-61,54,54,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,54,54,54,54,54,54,54,54,54,54,54,-60,54,54,-35,54,54,-34,54,54,]),'IS':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[55,-66,-64,-67,-68,-69,-70,-58,-59,55,55,-61,55,55,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,55,55,55,55,55,55,55,55,55,55,55,-60,55,55,-35,55,55,-34,55,55,]),'IS_EXCLAMATION':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[56,-66,-64,-67,-68,-69,-70,-58,-59,56,56,-61,56,56,-36,-37,-38,-39,-40,None,None,None,None,None,None,None,56,56,56,56,56,56,56,56,56,56,56,-60,56,56,-35,56,56,-34,56,56,]),'EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[57,-66,-64,-67,-68,-69,-70,-58,-59,57,57,-61,57,57,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,None,None,57,57,57,57,57,57,57,57,57,-60,57,57,-35,57,57,-34,57,57,]),'EXCLAMATION_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[58,-66,-64,-67,-68,-69,-70,-58,-59,58,58,-61,58,58,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,None,None,58,58,58,58,58,58,58,58,58,-60,58,58,-35,58,58,-34,58,58,]),'AND':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[59,-66,-64,-67,-68,-69,-70,-58,-59,59,59,-61,59,59,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,59,59,59,59,59,59,-60,59,59,-35,59,59,-34,59,59,]),'OR':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[60,-66,-64,-67,-68,-69,-70,-58,-59,60,60,-61,60,60,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,60,60,60,60,60,60,-60,60,60,-35,60,60,-34,60,60,]),'IF_NULL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[61,-66,-64,-67,-68,-69,-70,-58,-59,61,61,-61,61,61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,61,61,61,61,61,61,-60,61,61,-35,61,61,-34,61,61,]),'MULTIPLICATION_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[63,-66,-64,-67,-68,-69,-70,-58,-59,63,63,-61,-62,63,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,63,63,63,63,63,63,-60,63,63,-35,63,-63,-34,-53,63,]),'DIVIDE_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[64,-66,-64,-67,-68,-69,-70,-58,-59,64,64,-61,-62,64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,64,64,64,64,64,64,-60,64,64,-35,64,-63,-34,-53,64,]),'SOMA_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[65,-66,-64,-67,-68,-69,-70,-58,-59,65,65,-61,-62,65,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,65,65,65,65,65,65,-60,65,65,-35,65,-63,-34,-53,65,]),'SUB_EQUAL':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[66,-66,-64,-67,-68,-69,-70,-58,-59,66,66,-61,-62,66,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,66,66,66,66,66,66,-60,66,66,-35,66,-63,-34,-53,66,]),'MORE_MORE':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[67,-66,-64,-67,-68,-69,-70,-58,-59,67,67,None,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-60,67,67,-35,67,67,-34,67,67,]),'LESS_LESS':([21,28,33,34,35,36,37,67,68,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,115,116,117,126,129,135,],[68,-66,-64,-67,-68,-69,-70,-58,-59,68,68,None,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-60,68,68,-35,68,68,-34,68,68,]),'RPAREN':([28,33,34,35,36,37,40,67,68,70,76,78,79,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,110,113,114,115,116,117,118,126,129,135,138,139,141,142,147,],[-66,-64,-67,-68,-69,-70,83,-58,-59,108,115,-61,-62,119,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-56,-57,121,-60,122,-65,126,-35,-72,-63,-10,-34,-53,-32,-71,-11,-33,148,150,]),'VIRGULA':([28,33,34,35,36,37,67,68,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,108,113,115,116,117,118,125,126,129,143,],[-66,-64,-67,-68,-69,-70,-58,-59,-61,-62,-73,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-56,-57,-60,-65,-35,127,-63,128,137,-34,-53,149,]),'COLON':([28,33,34,35,36,37,67,68,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,115,117,126,129,],[-66,-64,-67,-68,-69,-70,-58,-59,-61,-62,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,120,-54,-55,-56,-57,-60,-65,-35,-63,-34,-53,]),'IN':([124,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,11,12,]),'funcdecl':([0,2,3,],[2,2,2,]),'declvar':([0,2,3,14,20,122,140,],[3,3,3,29,29,29,29,]),'signature':([0,2,3,],[4,4,4,]),'tipo':([0,2,3,14,20,40,73,122,128,140,],[5,5,5,27,27,81,112,27,81,27,]),'body':([4,121,122,140,148,150,],[13,130,133,145,151,153,]),'assign':([5,27,112,137,149,],[15,15,125,143,143,]),'stms':([14,20,],[18,43,]),'stm':([14,20,122,140,],[20,20,132,146,]),'exp':([14,20,23,24,31,32,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,120,122,123,127,140,141,],[21,21,70,71,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,113,116,117,129,21,135,116,21,135,]),'call':([14,20,23,24,31,32,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,75,76,77,120,122,123,127,140,141,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'sigParams':([40,128,],[82,139,]),'tiposassign':([73,],[111,]),'params':([76,127,],[114,138,]),'bodyorstm':([122,],[131,]),'midfor':([123,141,],[134,147,]),'tipoassigns':([137,149,],[144,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> funcdecl','program',1,'p_program','expression_parser.py',18),
  ('program -> funcdecl program','program',2,'p_program','expression_parser.py',19),
  ('program -> declvar','program',1,'p_program','expression_parser.py',20),
  ('program -> declvar program','program',2,'p_program','expression_parser.py',21),
  ('declvar -> tipo assign SEMI_COLON','declvar',3,'p_declvar','expression_parser.py',36),
  ('declvar -> tipo INTERROGATION ID SEMI_COLON','declvar',4,'p_declvar','expression_parser.py',37),
  ('funcdecl -> signature body','funcdecl',2,'p_funcdecl','expression_parser.py',46),
  ('signature -> tipo ID LPAREN sigParams RPAREN','signature',5,'p_signature','expression_parser.py',51),
  ('signature -> tipo ID LPAREN RPAREN','signature',4,'p_signature','expression_parser.py',52),
  ('sigParams -> tipo ID','sigParams',2,'p_sigParams','expression_parser.py',60),
  ('sigParams -> tipo ID VIRGULA sigParams','sigParams',4,'p_sigParams','expression_parser.py',61),
  ('body -> LCHAV stms RCHAV','body',3,'p_body','expression_parser.py',70),
  ('body -> LCHAV RCHAV','body',2,'p_body','expression_parser.py',71),
  ('bodyorstm -> stm','bodyorstm',1,'p_bodyorstm','expression_parser.py',82),
  ('bodyorstm -> body','bodyorstm',1,'p_bodyorstm','expression_parser.py',83),
  ('bodyorstm -> body ELSE stm','bodyorstm',3,'p_bodyorstm','expression_parser.py',84),
  ('bodyorstm -> body ELSE body','bodyorstm',3,'p_bodyorstm','expression_parser.py',85),
  ('stms -> stm','stms',1,'p_stms','expression_parser.py',99),
  ('stms -> stm stms','stms',2,'p_stms','expression_parser.py',100),
  ('stm -> exp SEMI_COLON','stm',2,'p_stm','expression_parser.py',109),
  ('stm -> WHILE LPAREN exp RPAREN body','stm',5,'p_stm','expression_parser.py',110),
  ('stm -> RETURN exp SEMI_COLON','stm',3,'p_stm','expression_parser.py',111),
  ('stm -> IF LPAREN exp RPAREN bodyorstm','stm',5,'p_stm','expression_parser.py',112),
  ('stm -> FOR LPAREN tiposassign SEMI_COLON midfor SEMI_COLON midfor RPAREN body','stm',9,'p_stm','expression_parser.py',113),
  ('stm -> FOR LPAREN tipo ID IN ID RPAREN body','stm',8,'p_stm','expression_parser.py',114),
  ('stm -> declvar','stm',1,'p_stm','expression_parser.py',115),
  ('tiposassign -> tipo assign','tiposassign',2,'p_tiposassign','expression_parser.py',135),
  ('tiposassign -> tipo assign VIRGULA tipoassigns','tiposassign',4,'p_tiposassign','expression_parser.py',136),
  ('tiposassign -> <empty>','tiposassign',0,'p_tiposassign','expression_parser.py',137),
  ('tipoassigns -> assign','tipoassigns',1,'p_tipoassigns','expression_parser.py',142),
  ('tipoassigns -> assign VIRGULA tipoassigns','tipoassigns',3,'p_tipoassigns','expression_parser.py',143),
  ('midfor -> exp','midfor',1,'p_midFor','expression_parser.py',148),
  ('midfor -> <empty>','midfor',0,'p_midFor','expression_parser.py',149),
  ('call -> ID LPAREN params RPAREN','call',4,'p_call','expression_parser.py',154),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','expression_parser.py',155),
  ('exp -> exp MORE exp','exp',3,'p_expMoreExp','expression_parser.py',160),
  ('exp -> exp LESS exp','exp',3,'p_expLessExp','expression_parser.py',165),
  ('exp -> exp REST exp','exp',3,'p_expRestExp','expression_parser.py',170),
  ('exp -> exp MULTIPLICATION exp','exp',3,'p_expMultiplicationExp','expression_parser.py',175),
  ('exp -> exp DIVIDE exp','exp',3,'p_expDivideExp','expression_parser.py',180),
  ('exp -> exp MORE_EQUAL exp','exp',3,'p_expMoreEqualExp','expression_parser.py',185),
  ('exp -> exp MORETHAN exp','exp',3,'p_expMoreThanExp','expression_parser.py',190),
  ('exp -> exp LESS_EQUAL exp','exp',3,'p_expLessEqualExp','expression_parser.py',195),
  ('exp -> exp LESSTHAN exp','exp',3,'p_expLessThanExp','expression_parser.py',200),
  ('exp -> exp AS exp','exp',3,'p_expAsExp','expression_parser.py',205),
  ('exp -> exp IS exp','exp',3,'p_expIsExp','expression_parser.py',210),
  ('exp -> exp IS_EXCLAMATION exp','exp',3,'p_expIsExclamationExp','expression_parser.py',215),
  ('exp -> exp EQUAL exp','exp',3,'p_expEqualExp','expression_parser.py',220),
  ('exp -> exp EXCLAMATION_EQUAL exp','exp',3,'p_expExclamationEqualExp','expression_parser.py',225),
  ('exp -> exp AND exp','exp',3,'p_expAndExp','expression_parser.py',230),
  ('exp -> exp OR exp','exp',3,'p_expOrExp','expression_parser.py',235),
  ('exp -> exp IF_NULL exp','exp',3,'p_expIfNullExp','expression_parser.py',240),
  ('exp -> exp INTERROGATION exp COLON exp','exp',5,'p_expInterrogationExpColonExp','expression_parser.py',245),
  ('exp -> exp MULTIPLICATION_EQUAL exp','exp',3,'p_expMultiplocationEqualExp','expression_parser.py',250),
  ('exp -> exp DIVIDE_EQUAL exp','exp',3,'p_expDivideEqualExp','expression_parser.py',255),
  ('exp -> exp SOMA_EQUAL exp','exp',3,'p_expSomaEqualExp','expression_parser.py',260),
  ('exp -> exp SUB_EQUAL exp','exp',3,'p_expSubEqualExp','expression_parser.py',270),
  ('exp -> exp MORE_MORE','exp',2,'p_expMoreMore','expression_parser.py',275),
  ('exp -> exp LESS_LESS','exp',2,'p_expLessLess','expression_parser.py',280),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expLparenExpRparen','expression_parser.py',285),
  ('exp -> AWAIT exp','exp',2,'p_expAwaitExp','expression_parser.py',290),
  ('exp -> DOT_DOT exp','exp',2,'p_expDotDotExp','expression_parser.py',295),
  ('exp -> INTERROGATION DOT_DOT exp','exp',3,'p_expInterrogationDotDotExp','expression_parser.py',300),
  ('exp -> call','exp',1,'p_expCall','expression_parser.py',305),
  ('exp -> ID RECEIVE_VALUE exp','exp',3,'p_expIdReceiveValueExp','expression_parser.py',310),
  ('exp -> ID','exp',1,'p_expId','expression_parser.py',315),
  ('exp -> NUM_INT','exp',1,'p_expNumInt','expression_parser.py',320),
  ('exp -> NUM_DOUBLE','exp',1,'p_expNumDouble','expression_parser.py',325),
  ('exp -> STR_STRING','exp',1,'p_expStrString','expression_parser.py',330),
  ('exp -> BOO_BOOLEAN','exp',1,'p_expBoolean','expression_parser.py',335),
  ('params -> exp VIRGULA params','params',3,'p_params','expression_parser.py',341),
  ('params -> exp','params',1,'p_params','expression_parser.py',342),
  ('assign -> ID RECEIVE_VALUE exp','assign',3,'p_assign','expression_parser.py',351),
  ('tipo -> TIPO_DOUBLE','tipo',1,'p_tipo','expression_parser.py',356),
  ('tipo -> TIPO_INT','tipo',1,'p_tipo','expression_parser.py',357),
  ('tipo -> TIPO_STRING','tipo',1,'p_tipo','expression_parser.py',358),
  ('tipo -> TIPO_BOOLEAN','tipo',1,'p_tipo','expression_parser.py',359),
  ('tipo -> TIPO_VOID','tipo',1,'p_tipo','expression_parser.py',360),
]
